import {
  __publicField
} from "./chunk-2B2CG5KL.js";

// node_modules/.pnpm/@dlightjs+dlight@1.0.0-alpha.23/node_modules/@dlightjs/dlight/dist/index.js
var d = class {
  constructor(e) {
    __publicField(this, "_$dlNodeType");
    __publicField(this, "_$parentEl");
    __publicField(this, "_$nodes");
    this._$dlNodeType = e;
  }
  get _$el() {
    return d.toEls(this._$nodes);
  }
  static toEls(e) {
    let t = [];
    return this.loopShallowEls(e, (n) => {
      t.push(n);
    }), t;
  }
  static loopDLNodes(e, t) {
    e.forEach((n) => {
      t(n), n._$nodes && d.loopDLNodes(n._$nodes, t);
    });
  }
  static loopDLNodesInsideOut(e, t) {
    e.forEach((n) => {
      n._$nodes && d.loopDLNodesInsideOut(n._$nodes, t), t(n);
    });
  }
  static loopShallowEls(e, t) {
    e.forEach((n) => {
      if (!("_$dlNodeType" in n))
        return t(n);
      n._$nodes && d.loopShallowEls(n._$nodes, t);
    });
  }
  static loopShallowDLNodes(e, t) {
    e.forEach((n) => {
      "_$dlNodeType" in n && (t(n), n._$nodes && d.loopShallowDLNodes(n._$nodes, t));
    });
  }
  static addParentEl(e, t) {
    this.loopShallowDLNodes(e, (n) => {
      n._$parentEl = t;
    });
  }
  static getFlowIndexFromNodes(e, t) {
    let n = 0, o = [...e];
    for (; o.length > 0; ) {
      let i = o.shift();
      if (i === t)
        break;
      "_$dlNodeType" in i ? i._$nodes && o.unshift(...i._$nodes) : n++;
    }
    return n;
  }
  static appendNodesWithSibling(e, t, n) {
    return n ? this.insertNodesBefore(e, t, n) : this.appendNodes(e, t);
  }
  static appendNodesWithIndex(e, t, n, o) {
    return o = o ?? t.childNodes.length, o !== n ? this.insertNodesBefore(e, t, t.childNodes[n]) : this.appendNodes(e, t);
  }
  static insertNodesBefore(e, t, n) {
    let o = 0;
    return this.loopShallowEls(e, (i) => {
      t.insertBefore(i, n), o++;
    }), o;
  }
  static appendNodes(e, t) {
    let n = 0;
    return this.loopShallowEls(e, (o) => {
      t.appendChild(o), n++;
    }), n;
  }
  static willUnmountFunc(e, t) {
    e(), t == null ? void 0 : t();
  }
  static addWillUnmount(e, t) {
    e.willUnmount = this.willUnmountFunc.bind(this, t, e.willUnmount);
  }
};
function P(s, e) {
  Object.entries(e).forEach(([t, n]) => {
    s.style[t] = n;
  });
}
function C(s, e) {
  Object.entries(e).forEach(([t, n]) => {
    s.dataset[t] = n;
  });
}
function x(s, e, t) {
  let n = `$${e}`;
  n in s && s[n] === t || (s[e] = t, s[n] = t);
}
function W(s, e) {
  Object.entries(e).forEach(([t, n]) => {
    x(s, t, n);
  });
}
function T(s, e, t) {
  let n = `$${e}`;
  n in s && s[n] === t || (s.setAttribute(e, t), s[n] = t);
}
function O(s, e) {
  Object.entries(e).forEach(([t, n]) => {
    T(s, t, n);
  });
}
function U(s, e, t) {
  let n = s[`$on${e}`];
  n && s.removeEventListener(e, n), s.addEventListener(e, t), s[`$on${e}`] = t;
}
function B(s) {
  let e = document.createElement("template");
  e.innerHTML = s;
  let t = e.content.firstChild;
  return () => t.cloneNode(true);
}
function R(s) {
  return document.createElement(s);
}
function b(s, e, t) {
  s._$nodes || (s._$nodes = Array.from(s.childNodes)), s._$nodes.splice(t, 0, e), d.appendNodesWithIndex([e], s, t), d.addParentEl([e], s);
}
function w(s, e, t) {
  if (e === "style") {
    P(s, t);
    return;
  }
  if (e === "dataset") {
    C(s, t);
    return;
  }
  if (e !== "element") {
    if (e === "prop") {
      W(s, t);
      return;
    }
    if (e === "attr") {
      O(s, t);
      return;
    }
    if (e === "innerHTML") {
      x(s, "innerHTML", t);
      return;
    }
    if (e !== "forwardProp") {
      if (e.startsWith("on")) {
        U(s, e.slice(2).toLowerCase(), t);
        return;
      }
      T(s, e, t);
    }
  }
}
var g = class extends d {
  constructor() {
    super(0);
  }
  _$init(e, t, n, o) {
    var _a, _b, _c;
    o && o._$addForwardProps(this), t !== null && this._$setContent(t), e && Object.entries(e).forEach(([i, c]) => {
      this._$setProp(i, c);
    }), n && (this._$children = n), Object.entries(window.DLEnvStore.envs).forEach(([i, [c, p]]) => {
      p.addNode(this), this._$initEnv(i, c, p);
    }), this._$callUpdatesBeforeInit(), (_a = this.willMount) == null ? void 0 : _a.call(this), this._$nodes = ((_b = this.View) == null ? void 0 : _b.call(this)) ?? [], (_c = this.didMount) == null ? void 0 : _c.call(this);
  }
  _$callUpdatesBeforeInit() {
    let e = Object.getOwnPropertyNames(Object.getPrototypeOf(this)), t = Object.getOwnPropertyNames(this);
    [...e, ...t].forEach((o) => {
      if (o.startsWith("$w$"))
        return this[o.slice(3)]();
      o.startsWith("$f$") && (this[`$${o.slice(3)}`] = this[o]);
    });
  }
  _$setForwardProp(e, t) {
    if (e in this) {
      this[e] = t;
      return;
    }
    this._$forwardPropsId.push(e);
    let n = `$${e}`;
    this[n] = t, Object.defineProperty(this, e, { get() {
      return this[n];
    }, set(o) {
      var _a;
      this[n] !== o && (this[n] = o, (_a = this._$forwardPropsSet) == null ? void 0 : _a.forEach((i) => {
        i._$dlNodeType === 0 && i._$setProp(e, o), i instanceof HTMLElement && w(i, e, o);
      }));
    } });
  }
  _$addForwardProps(e) {
    this._$forwardPropsSet.add(e), this._$forwardPropsId.forEach((t) => {
      var _a;
      let n = this[t];
      (_a = this._$forwardPropsSet) == null ? void 0 : _a.forEach((o) => {
        o._$dlNodeType === 0 && ("_$forwardProps" in o && o._$forwardPropsId.push(t), o._$setProp(t, n)), o instanceof HTMLElement && w(o, t, n);
      });
    }), d.addWillUnmount(e, this._$forwardPropsSet.delete.bind(this._$forwardPropsSet, e));
  }
  _$setProp(e, t) {
    "_$forwardProps" in this && this._$setForwardProp(e, t), `$p$${e}` in this && (this[e] = t);
  }
  _$initEnv(e, t, n) {
    `$e$${e}` in this && (this[e] = t, this[`$en$${e}`] = n);
  }
  _$updateEnv(e, t, n) {
    `$e$${e}` in this && n === this[`$en$${e}`] && this[e] !== t && (this[e] = t);
  }
  _$setContent(e) {
    let t = this._$contentKey;
    t && this[t] !== e && (this[t] = e);
  }
  _$updateProp(e, t) {
    let n = `$${e}`;
    this[n] !== t && (this[n] = t, this._$updateDerived(e), this._$updateView(e));
  }
  _$updateDerived(e) {
    var _a;
    this._$nodes && ((_a = this[`$s$${e}`]) == null ? void 0 : _a.forEach((t) => {
      `$w$${t}` in this ? this[t]() : this[`$${t}`] = this[`$f$${t}`];
    }));
  }
  _$updateView(e) {
    var _a;
    let t = this[`$$${e}`];
    t && ((_a = this._$update) == null ? void 0 : _a.call(this, t));
  }
};
var J = g;
function Q(s, e) {
  s._$updateDerived(e), s._$updateView(e);
}
var a = class extends d {
  constructor(e) {
    super(e), window.DLEnvStore.currentEnvNodes.length > 0 && (this.savedEnvNodes = [...window.DLEnvStore.currentEnvNodes]);
  }
  initNewNodes(e) {
    d.addParentEl(e, this._$parentEl);
  }
  geneNewNodesInEnv(e) {
    if (!this.savedEnvNodes) {
      let o = e();
      return this.initNewNodes(o), o;
    }
    let t = window.DLEnvStore.currentEnvNodes;
    window.DLEnvStore.replaceEnvNodes(this.savedEnvNodes);
    let n = e();
    return window.DLEnvStore.replaceEnvNodes(t), this.initNewNodes(n), n;
  }
  removeNodes(e) {
    d.loopDLNodes(e, (t) => {
      var _a;
      return (_a = t.willUnmount) == null ? void 0 : _a.call(t);
    }), d.loopShallowEls(e, (t) => {
      var _a;
      (_a = this._$parentEl) == null ? void 0 : _a.removeChild(t);
    }), d.loopDLNodesInsideOut(e, (t) => {
      var _a;
      return (_a = t.didUnmount) == null ? void 0 : _a.call(t);
    });
  }
};
var $ = class extends a {
  constructor(e, t, n, o) {
    super(1);
    __publicField(this, "array");
    __publicField(this, "keys");
    __publicField(this, "nodeFunc");
    __publicField(this, "nodess");
    __publicField(this, "depNum");
    this.array = [...e], this.nodeFunc = t, this.keys = o, this.depNum = n, this.nodess = this.array.map((i) => t(i)), this._$nodes = this.nodess.flat(1);
  }
  update(e) {
    if (!(e & this.depNum))
      for (let t = 0; t < this.array.length; t++)
        this.updateItem(this.nodess[t], this.array[t], e);
  }
  updateItem(e, t, n) {
    var _a, _b;
    (_b = (_a = e[0])._$updateFunc) == null ? void 0 : _b.call(_a, n ?? this.depNum, t);
  }
  updateArray(e, t) {
    if (t) {
      this.updateWithKey(e, t);
      return;
    }
    this.updateWithOutKey(e);
  }
  getNewNodes(e) {
    return this.geneNewNodesInEnv(() => this.nodeFunc(this.array[e]));
  }
  updateWithOutKey(e) {
    let t = this.array.length, n = e.length;
    if (this.array = [...e], t === n) {
      for (let i = 0; i < this.array.length; i++)
        this.updateItem(this.nodess[i], this.array[i]);
      return;
    }
    let o = this._$parentEl;
    if (t < n) {
      let i = a.getFlowIndexFromNodes(o._$nodes, this), c = o.childNodes.length;
      for (let p = 0; p < n; p++) {
        if (p < t) {
          i += a.getFlowIndexFromNodes(this.nodess[p]), this.updateItem(this.nodess[p], this.array[p]);
          continue;
        }
        let l = this.getNewNodes(p);
        a.appendNodesWithIndex(l, o, i, c), this.nodess.push(l);
      }
      this._$nodes = this.nodess.flat(1);
      return;
    }
    for (let i = 0; i < n; i++)
      this.updateItem(this.nodess[i], this.array[i]);
    for (let i = n; i < t; i++)
      this.removeNodes(this.nodess[i]);
    this.nodess = this.nodess.slice(0, n), this._$nodes = this.nodess.flat(1);
  }
  updateWithKey(e, t) {
    let n = this.keys, o = this.array;
    if (this.array = [...e], this.keys = t, $.arrayEqual(n, this.keys)) {
      for (let r = 0; r < this.array.length; r++)
        this.updateItem(this.nodess[r], this.array[r]);
      return;
    }
    let i = this._$parentEl, c = this.nodess;
    if (this.keys.length === 0) {
      let r = i._$nodes ?? [];
      if (r.length === 1 && r[0] === this)
        i.innerHTML = "";
      else
        for (let h = 0; h < n.length; h++)
          this.removeNodes(c[h]);
      this.nodess = [], this._$nodes = [];
      return;
    }
    let p = a.getFlowIndexFromNodes(i._$nodes, this);
    if (n.length === 0) {
      let r = i.childNodes[p];
      for (let h = 0; h < this.keys.length; h++) {
        let u = this.getNewNodes(h);
        a.appendNodesWithSibling(u, i, r), this.nodess.push(u);
      }
      this._$nodes = this.nodess.flat(1);
      return;
    }
    let l = [], N = [], S = [];
    for (let r = 0; r < n.length; r++) {
      let h = n[r];
      if (this.keys.includes(h)) {
        l.push(h), N.push(c[r]), S.push(o[r]);
        continue;
      }
      this.removeNodes(c[r]);
    }
    let y = i.childNodes.length, f = p;
    for (let r = 0; r < this.keys.length; r++) {
      let h = this.keys[r], u = l.indexOf(h);
      if (u !== -1) {
        f += a.getFlowIndexFromNodes(N[u]), this.updateItem(N[u], this.array[r]);
        continue;
      }
      let m = this.getNewNodes(r), E = a.appendNodesWithIndex(m, i, f, y);
      f += E, y += E, N.splice(r, 0, m), l.splice(r, 0, h);
    }
    if ($.arrayEqual(this.keys, l)) {
      this.nodess = N, this._$nodes = this.nodess.flat(1);
      return;
    }
    f = p;
    let A = [];
    for (let r = 0; r < this.keys.length; r++) {
      let h = this.keys[r], u = l.indexOf(h), m = A[r];
      if (m) {
        let L = a.appendNodesWithIndex(m, i, f + a.getFlowIndexFromNodes(m), y);
        f += L, y += L, A[r] = void 0;
      } else if (u === r) {
        f += a.getFlowIndexFromNodes(N[r]);
        continue;
      } else {
        A[this.keys.indexOf(l[r])] = N[r];
        let L = a.appendNodesWithIndex(N[u], i, f, y);
        f += L, y += L;
      }
      let E = N[r];
      N[r] = N[u], N[u] = E;
      let F = l[r];
      l[r] = l[u], l[u] = F;
    }
    this.nodess = N, this._$nodes = this.nodess.flat(1);
  }
  static arrayEqual(e, t) {
    return e.length !== t.length ? false : e.every((n, o) => n === t[o]);
  }
};
var v = class extends a {
  constructor(e) {
    super(4);
    __publicField(this, "nodesFunc");
    this.nodesFunc = e, this._$nodes = v.formatNodes(e());
  }
  update() {
    let e = this.geneNewNodesInEnv(() => v.formatNodes(this.nodesFunc()));
    if (this.removeNodes(this._$nodes), e.length === 0) {
      this._$nodes = [];
      return;
    }
    let t = this._$parentEl, n = a.getFlowIndexFromNodes(t._$nodes, this), o = t.childNodes[n];
    a.appendNodesWithSibling(e, t, o), this._$nodes = e;
  }
  static formatNodes(e) {
    return Array.isArray(e) || (e = [e]), e.flat(1).filter((t) => t != null && typeof t != "boolean").map((t) => typeof t == "string" || typeof t == "number" || typeof t == "bigint" ? document.createTextNode(`${t}`) : "propViewFunc" in t ? t.build() : t).flat(1);
  }
};
var I = class extends a {
  constructor(e, t) {
    super(2);
    __publicField(this, "condFunc");
    __publicField(this, "cond");
    __publicField(this, "depNum");
    this.condFunc = e, this.depNum = t, this.cond = -1, this._$nodes = this.condFunc(this);
  }
  updateCond() {
    let e = this.geneNewNodesInEnv(() => this.condFunc(this));
    if (this.didntChange)
      return this.didntChange = false, this.updateChildren();
    if (this._$nodes && this._$nodes.length > 0 && this.removeNodes(this._$nodes), this.cond === -1) {
      this._$nodes = [];
      return;
    }
    let t = this._$parentEl, n = a.getFlowIndexFromNodes(t._$nodes, this), o = t.childNodes[n];
    a.appendNodesWithSibling(e, t, o), this._$nodes = e;
  }
  updateChildren(e) {
    var _a, _b;
    (_b = (_a = this._$nodes[0]) == null ? void 0 : _a._$updateFunc) == null ? void 0 : _b.call(_a, e ?? this.depNum);
  }
  update(e) {
    e & this.depNum || this.updateChildren(e);
  }
};
var _ = class {
  constructor() {
    __publicField(this, "envs", {});
    __publicField(this, "currentEnvNodes", []);
  }
  addEnvNode(e) {
    this.currentEnvNodes.push(e), this.mergeEnvs();
  }
  replaceEnvNodes(e) {
    this.currentEnvNodes = e, this.mergeEnvs();
  }
  removeEnvNode() {
    this.currentEnvNodes.pop(), this.mergeEnvs();
  }
  mergeEnvs() {
    this.envs = {}, this.currentEnvNodes.forEach((e) => {
      Object.entries(e.envs).forEach(([t, n]) => {
        this.envs[t] = [n, e];
      });
    });
  }
};
window.DLEnvStore || (window.DLEnvStore = new _());
var M = class extends d {
  constructor(e) {
    super(3);
    __publicField(this, "updateNodes", /* @__PURE__ */ new Set());
    __publicField(this, "envs");
    this.envs = e, window.DLEnvStore.addEnvNode(this);
  }
  updateEnv(e, t) {
    this.envs[e] = t, this.updateNodes.forEach((n) => {
      n._$updateEnv(e, t, this);
    });
  }
  addNode(e) {
    this.updateNodes.add(e), d.addWillUnmount(e, this.updateNodes.delete.bind(this.updateNodes, e));
  }
  initNodes(e) {
    this._$nodes = e, window.DLEnvStore.removeEnvNode();
  }
};
function pe(s) {
  return document.createTextNode(s);
}
function le(s, e) {
  s.textContent !== e && (s.textContent = e);
}
var H = class {
  constructor(e) {
    __publicField(this, "propViewFunc");
    __publicField(this, "dlUpdateNodes", /* @__PURE__ */ new Set());
    this.propViewFunc = e;
  }
  build() {
    let e = this.propViewFunc();
    if (e.length === 0)
      return [];
    let t = e[0];
    return this.dlUpdateNodes.add(t), d.addWillUnmount(t, this.dlUpdateNodes.delete.bind(this.dlUpdateNodes, t)), e;
  }
  update(e) {
    this.dlUpdateNodes.forEach((t) => {
      var _a;
      (_a = t._$updateFunc) == null ? void 0 : _a.call(t, e);
    });
  }
};
function ye(s, e) {
  let t = s;
  if (typeof s == "string") {
    let o = document.getElementById(s);
    if (o)
      t = o;
    else
      throw new Error(`DLight: Element with id ${s} not found`);
  }
  t.innerHTML = "";
  let n = new e();
  b(t, n, 0);
}
function me(s, e) {
  return s();
}
function K(s) {
  return s;
}
var Le = K;
export {
  Le as $,
  g as CompNode,
  I as CondNode,
  M as EnvNode,
  v as ExpNode,
  $ as ForNode,
  H as PropView,
  J as View,
  R as createElement,
  B as createTemplate,
  pe as createTextNode,
  K as escape,
  w as forwardHTMLProp,
  b as insertNode,
  me as manual,
  ye as render,
  C as setDataset,
  U as setEvent,
  T as setHTMLAttr,
  O as setHTMLAttrs,
  x as setHTMLProp,
  W as setHTMLProps,
  P as setStyle,
  Q as update,
  le as updateText
};
//# sourceMappingURL=@dlightjs_dlight.js.map

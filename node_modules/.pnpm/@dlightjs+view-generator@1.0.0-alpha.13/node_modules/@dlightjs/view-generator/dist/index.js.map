{"version":3,"sources":["../src/error.ts","../src/HelperGenerators/BaseGenerator.ts","../src/HelperGenerators/PropViewGenerator.ts","../src/HelperGenerators/DoGenerator.ts","../src/HelperGenerators/ElementGenerator.ts","../src/HelperGenerators/ForwardPropGenerator.ts","../src/NodeGenerators/CompGenerator.ts","../src/attr.ts","../src/HelperGenerators/HTMLPropGenerator.ts","../src/NodeGenerators/HTMLGenerator.ts","../src/NodeGenerators/TemplateGenerator.ts","../src/NodeGenerators/ForGenerator.ts","../src/HelperGenerators/CondGenerator.ts","../src/NodeGenerators/IfGenerator.ts","../src/NodeGenerators/EnvGenerator.ts","../src/NodeGenerators/TextGenerator.ts","../src/NodeGenerators/ExpGenerator.ts","../src/NodeGenerators/SubViewGenerator.ts","../src/NodeGenerators/SwitchGenerator.ts","../src/ViewGenerator.ts","../src/MainViewGenerator.ts","../src/SubViewGenerator.ts","../src/index.ts"],"sourcesContent":["import { createErrorHandler } from \"@dlightjs/error-handler\"\n\nexport const DLError = createErrorHandler(\n  \"ViewGenerator\",\n  {\n    1: \"Element prop in HTML should be a function or an identifier\",\n    2: \"Unrecognized HTML common prop\",\n    3: \"Do prop only accepts function or arrow function\",\n  },\n  {},\n  {\n    1: 'ExpressionNode only supports prop as [\"element\", \"do\"]',\n  }\n)\n","import { type types as t, type traverse } from \"@babel/core\"\nimport { type ViewParticle } from \"@dlightjs/reactivity-parser\"\nimport { type SubViewPropMap, type ViewGeneratorConfig } from \"../types\"\nimport ViewGenerator from \"../ViewGenerator\"\n\nconst devMode = process.env.NODE_ENV === \"development\"\n\nexport default class BaseGenerator {\n  static readonly prefixMap = devMode\n    ? { template: \"$template\", node: \"$node\" }\n    : { template: \"$t\", node: \"$n\" }\n\n  readonly viewParticle: ViewParticle\n  readonly config: ViewGeneratorConfig\n\n  readonly t: typeof t\n  readonly traverse: typeof traverse\n  readonly className: string\n  readonly importMap: Record<string, string>\n  readonly subViewPropMap: SubViewPropMap\n\n  readonly viewGenerator\n\n  /**\n   * @brief Constructor\n   * @param viewUnit\n   * @param config\n   */\n  constructor(viewParticle: ViewParticle, config: ViewGeneratorConfig) {\n    this.viewParticle = viewParticle\n    this.config = config\n    this.t = config.babelApi.types\n    this.traverse = config.babelApi.traverse\n    this.className = config.className\n    this.importMap = config.importMap\n    this.subViewPropMap = config.subViewPropMap\n    this.viewGenerator = new ViewGenerator(config)\n  }\n\n  // ---- Init Statements\n  private readonly initStatements: t.Statement[] = []\n  addInitStatement(...statements: t.Statement[]) {\n    this.initStatements.push(...statements)\n  }\n\n  // ---- Added Class Properties, typically used in for Template\n  private readonly classProperties: t.ClassProperty[] = []\n  addStaticClassProperty(key: string, value: t.Expression) {\n    this.classProperties.push(\n      this.t.classProperty(\n        this.t.identifier(key),\n        value,\n        undefined,\n        undefined,\n        undefined,\n        true\n      )\n    )\n  }\n\n  // ---- Update Statements\n  private readonly updateStatements: Record<number, t.Statement[]> = {}\n  addUpdateStatements(\n    dependencies: number[] | undefined,\n    statement: t.Statement\n  ) {\n    if (!dependencies || dependencies.length === 0) return\n    const depNum = BaseGenerator.calcDependencyNum(dependencies)\n    if (!this.updateStatements[depNum]) this.updateStatements[depNum] = []\n    this.updateStatements[depNum].push(statement)\n  }\n\n  addUpdateStatementsWithoutDep(statement: t.Statement) {\n    if (!this.updateStatements[0]) this.updateStatements[0] = []\n    this.updateStatements[0].push(statement)\n  }\n\n  /**\n   * @returns [initStatements, updateStatements, classProperties, nodeName]\n   */\n  generate(): [\n    t.Statement[],\n    Record<number, t.Statement[]>,\n    t.ClassProperty[],\n    string,\n  ] {\n    const nodeName = this.run()\n    return [\n      this.initStatements,\n      this.updateStatements,\n      this.classProperties,\n      nodeName,\n    ]\n  }\n\n  /**\n   * @brief Generate the view given the view particles, mainly used for child particles parsing\n   * @param viewParticles\n   * @param mergeStatements\n   * @returns [initStatements, topLevelNodes, updateStatements]\n   */\n  generateChildren(\n    viewParticles: ViewParticle[],\n    mergeStatements = true\n  ): [t.Statement[], string[], Record<number, t.Statement[]>] {\n    this.viewGenerator.nodeIdx = this.nodeIdx\n    this.viewGenerator.templateIdx = this.templateIdx\n    const [initStatements, updateStatements, classProperties, topLevelNodes] =\n      this.viewGenerator.generateChildren(viewParticles)\n    this.nodeIdx = this.viewGenerator.nodeIdx\n    this.templateIdx = this.viewGenerator.templateIdx\n    this.classProperties.push(...classProperties)\n    if (mergeStatements) this.mergeStatements(updateStatements)\n\n    return [initStatements, topLevelNodes, updateStatements]\n  }\n\n  /**\n   * @brief Merge the update statements\n   * @param statements\n   */\n  private mergeStatements(statements: Record<number, t.Statement[]>): void {\n    Object.entries(statements).forEach(([depNum, statements]) => {\n      if (!this.updateStatements[Number(depNum)]) {\n        this.updateStatements[Number(depNum)] = []\n      }\n      this.updateStatements[Number(depNum)].push(...statements)\n    })\n  }\n\n  /**\n   * @brief Generate the view given the view particle\n   * @param viewParticle\n   * @param mergeStatements\n   * @returns [initStatements, nodeName, updateStatements]\n   */\n  generateChild(\n    viewParticle: ViewParticle,\n    mergeStatements = true\n  ): [t.Statement[], string, Record<number, t.Statement[]>] {\n    this.viewGenerator.nodeIdx = this.nodeIdx\n    this.viewGenerator.templateIdx = this.templateIdx\n    const [initStatements, updateStatements, classProperties, nodeName] =\n      this.viewGenerator.generateChild(viewParticle)\n    this.nodeIdx = this.viewGenerator.nodeIdx\n    this.templateIdx = this.viewGenerator.templateIdx\n    this.classProperties.push(...classProperties)\n    if (mergeStatements) this.mergeStatements(updateStatements)\n\n    return [initStatements, nodeName, updateStatements]\n  }\n\n  /**\n   * @View\n   * this._$update = (changed) => {\n   *   if (changed & 1) {\n   *     ...\n   *   }\n   *   ...\n   * }\n   */\n  geneUpdateBody(\n    updateStatements: Record<number, t.Statement[]>\n  ): t.BlockStatement {\n    return this.t.blockStatement([\n      ...Object.entries(updateStatements)\n        .filter(([depNum]) => depNum !== \"0\")\n        .map(([depNum, statements]) => {\n          return this.t.ifStatement(\n            this.t.binaryExpression(\n              \"&\",\n              this.t.identifier(\"changed\"),\n              this.t.numericLiteral(Number(depNum))\n            ),\n            this.t.blockStatement(statements)\n          )\n        }),\n      ...(updateStatements[0] ?? []),\n    ])\n  }\n\n  /**\n   * @View\n   * return [${topLevelNodes}]\n   */\n  generateReturnStatement(topLevelNodes: string[]): t.ReturnStatement {\n    return this.t.returnStatement(\n      this.t.arrayExpression(topLevelNodes.map(name => this.t.identifier(name)))\n    )\n  }\n\n  /**\n   * @brief To be implemented by the subclass as the main node generation function\n   * @returns dlNodeName\n   */\n  run(): string {\n    return \"\"\n  }\n\n  // ---- Name ----\n  // ---- Used as dlNodeName for any node declaration\n  nodeIdx = -1\n  generateNodeName(idx?: number): string {\n    return `${BaseGenerator.prefixMap.node}${idx ?? ++this.nodeIdx}`\n  }\n\n  // ---- Used as template generation as class property\n  templateIdx = -1\n  generateTemplateName(): string {\n    return `${BaseGenerator.prefixMap.template}${++this.templateIdx}`\n  }\n\n  // ---- @Utils -----\n  /**\n   *\n   * @param updateStatements\n   * @returns\n   */\n\n  /**\n   * @brief Calculate the dependency number from an array of dependency index\n   *  e.g.\n   *    [0, 1, 2] => 0b111 => 7\n   *    [1, 3] => 0b1010 => 10\n   * @param dependencies\n   * @returns dependency number\n   */\n  static calcDependencyNum(dependencies: number[] | undefined): number {\n    if (!dependencies || dependencies.length === 0) return 0\n    dependencies = [...new Set(dependencies)]\n    return dependencies.reduce((acc, dep) => acc + (1 << dep), 0)\n  }\n\n  /**\n   * @brief Wrap the value in a file\n   * @param node\n   * @returns wrapped value\n   */\n  valueWrapper(node: t.Expression | t.Statement): t.File {\n    return this.t.file(\n      this.t.program([\n        this.t.isStatement(node) ? node : this.t.expressionStatement(node),\n      ])\n    )\n  }\n\n  /**\n   * @brief Shorthand function for collecting statements in batch\n   * @returns [statements, collect]\n   */\n  static statementsCollector(): [\n    t.Statement[],\n    (...statements: t.Statement[] | t.Statement[][]) => void,\n  ] {\n    const statements: t.Statement[] = []\n    const collect = (...newStatements: t.Statement[] | t.Statement[][]) => {\n      newStatements.forEach(s => {\n        if (Array.isArray(s)) {\n          statements.push(...s)\n        } else {\n          statements.push(s)\n        }\n      })\n    }\n\n    return [statements, collect]\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport {\n  type DependencyProp,\n  type ViewParticle,\n} from \"@dlightjs/reactivity-parser\"\nimport BaseGenerator from \"./BaseGenerator\"\n\nexport default class PropViewGenerator extends BaseGenerator {\n  /**\n   * @brief Alter prop view in batch\n   * @param props\n   * @returns altered props\n   */\n  alterPropViews<T extends Record<string, DependencyProp> | undefined>(\n    props: T\n  ): T {\n    if (!props) return props\n    return Object.fromEntries(\n      Object.entries(props).map(([key, prop]) => {\n        return [key, this.alterPropView(prop)!]\n      })\n    ) as T\n  }\n\n  /**\n   * @View\n   * const ${dlNodeName} = new PropView(() => {\n   *  ${initStatements}\n   *  ${topLevelNodes[0])._$updateFunc = (changed) => { ${updateStatements} }\n   *  return ${topLevelNodes}\n   * })\n   */\n  declarePropView(viewParticles: ViewParticle[]) {\n    // ---- Generate PropView\n    const [initStatements, topLevelNodes, updateStatements] =\n      this.generateChildren(viewParticles, false)\n    // ---- Add update function to the first node\n    if (topLevelNodes.length > 0) {\n      /**\n       * ${topLevelNodes[0]}.update = (changed) => ${updateStatements}\n       */\n      if (Object.keys(updateStatements).length > 0) {\n        initStatements.push(\n          this.t.expressionStatement(\n            this.t.assignmentExpression(\n              \"=\",\n              this.t.memberExpression(\n                this.t.identifier(topLevelNodes[0]),\n                this.t.identifier(\"_$updateFunc\")\n              ),\n              this.t.arrowFunctionExpression(\n                [this.t.identifier(\"changed\")],\n                this.geneUpdateBody(updateStatements)\n              )\n            )\n          )\n        )\n      }\n      initStatements.push(this.generateReturnStatement(topLevelNodes))\n    }\n\n    // ---- Assign as a dlNode\n    const dlNodeName = this.generateNodeName()\n    const propViewNode = this.t.variableDeclaration(\"const\", [\n      this.t.variableDeclarator(\n        this.t.identifier(dlNodeName),\n        this.t.newExpression(this.t.identifier(this.importMap.PropView), [\n          this.t.arrowFunctionExpression(\n            [],\n            this.t.blockStatement(initStatements)\n          ),\n        ])\n      ),\n    ])\n    this.addInitStatement(propViewNode)\n    const propViewIdentifier = this.t.identifier(dlNodeName)\n\n    // ---- Add to update statements\n    /**\n     * ${dlNodeName}.update(changed)\n     */\n    this.addUpdateStatementsWithoutDep(\n      this.t.expressionStatement(\n        this.t.callExpression(\n          this.t.memberExpression(\n            propViewIdentifier,\n            this.t.identifier(\"update\")\n          ),\n          [this.t.identifier(\"changed\")]\n        )\n      )\n    )\n\n    return dlNodeName\n  }\n\n  /**\n   * @brief Alter prop view by replacing prop view with a recursively generated prop view\n   * @param prop\n   * @returns altered prop\n   */\n  alterPropView<T extends DependencyProp | undefined>(prop: T): T {\n    if (!prop) return prop\n    const { value, viewPropMap } = prop\n    if (!viewPropMap) return { ...prop, value }\n    let newValue = value\n    this.traverse(this.valueWrapper(value), {\n      StringLiteral: innerPath => {\n        const id = innerPath.node.value\n        const viewParticles = viewPropMap[id]\n        if (!viewParticles) return\n        const propViewIdentifier = this.t.identifier(\n          this.declarePropView(viewParticles)\n        )\n\n        if (value === innerPath.node) newValue = propViewIdentifier\n        innerPath.replaceWith(propViewIdentifier)\n        innerPath.skip()\n      },\n    })\n    return { ...prop, value: newValue }\n  }\n\n  /**\n   * @brief Get the dependency index array from the update statements' keys\n   *  i.e. [1, 2, 7] => [0b1, 0b10, 0b111] => [[1], [2], [0, 1, 2]] => [0, 1, 2]\n   * @param updateStatements\n   * @returns dependency index array\n   */\n  private static reverseDependencyIndexArr(\n    updateStatements: Record<number, t.Statement[]>\n  ): number[] {\n    const allDepsNum = Object.keys(updateStatements)\n      .map(Number)\n      .reduce((acc, depNum) => acc | depNum, 0)\n    const allDeps = []\n    for (let i = 0; i < String(allDepsNum).length; i++) {\n      if (allDepsNum & (1 << i)) allDeps.push(i)\n    }\n    return allDeps\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport { DLError } from \"../error\"\nimport PropViewGenerator from \"./PropViewGenerator\"\n\nexport default class DoGenerator extends PropViewGenerator {\n  /**\n   * @View\n   * ${value}(dlNodeName)\n   */\n  addDo(dlNodeName: string, value: t.Expression): t.ExpressionStatement {\n    if (\n      !this.t.isFunctionExpression(value) &&\n      !this.t.isArrowFunctionExpression(value)\n    ) {\n      return DLError.throw1()\n    }\n    return this.t.expressionStatement(\n      this.t.callExpression(value, [this.t.identifier(dlNodeName)])\n    )\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport { DLError } from \"../error\"\nimport DoGenerator from \"./DoGenerator\"\n\nexport default class ElementGenerator extends DoGenerator {\n  /**\n   * @brief Generate a view unit for an element\n   *  e.g. div().element(this.el)\n   * @param dlNodeName\n   * @param value\n   * @param el true: dlNodeName._$el, false: dlNodeName\n   * @returns t.Statement\n   */\n  setElement(dlNodeName: string, value: t.Expression, el = false): t.Statement {\n    const elNode = el\n      ? this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(\"_$el\")\n        )\n      : this.t.identifier(dlNodeName)\n\n    return this.isOnlyMemberExpression(value)\n      ? this.assignHTMLElement(elNode, value as t.MemberExpression)\n      : this.assignHTMLFunctionElement(elNode, value)\n  }\n\n  /**\n   * if (typeof ${value} === \"function\") {\n   *  ${value}(${elNode})\n   * } else {\n   *  ${value} = ${elNode}\n   * }\n   */\n  private assignHTMLElement(\n    elNode: t.Expression,\n    value: t.MemberExpression\n  ): t.IfStatement {\n    return this.t.ifStatement(\n      this.t.binaryExpression(\n        \"===\",\n        this.t.unaryExpression(\"typeof\", value, true),\n        this.t.stringLiteral(\"function\")\n      ),\n      this.t.expressionStatement(this.t.callExpression(value, [elNode])),\n      this.t.expressionStatement(\n        this.t.assignmentExpression(\"=\", value, elNode)\n      )\n    )\n  }\n\n  /**\n   * ${value}(${elNode})\n   */\n  private assignHTMLFunctionElement(\n    elNode: t.Expression,\n    value: t.Expression\n  ): t.Statement {\n    if (\n      !this.t.isFunctionExpression(value) &&\n      !this.t.isArrowFunctionExpression(value)\n    ) {\n      return DLError.throw1()\n    }\n    return this.t.expressionStatement(this.t.callExpression(value, [elNode]))\n  }\n\n  // --- Utils\n  private isOnlyMemberExpression(value: t.Expression): boolean {\n    if (!this.t.isMemberExpression(value)) return false\n    while (value.property) {\n      if (this.t.isMemberExpression(value.property)) {\n        value = value.property\n        continue\n      } else if (this.t.isIdentifier(value.property)) break\n      else return false\n    }\n    return true\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport ElementGenerator from \"./ElementGenerator\"\n\nexport default class ForwardPropsGenerator extends ElementGenerator {\n  /**\n   * @View\n   * this._$forwardProp(${dlNodeName})\n   */\n  forwardProps(dlNodeName: string): t.ExpressionStatement {\n    return this.t.expressionStatement(\n      this.t.callExpression(\n        this.t.memberExpression(\n          this.t.thisExpression(),\n          this.t.identifier(\"_$addForwardProps\")\n        ),\n        [this.t.identifier(dlNodeName)]\n      )\n    )\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport {\n  type DependencyProp,\n  type CompParticle,\n  type ViewParticle,\n} from \"@dlightjs/reactivity-parser\"\nimport ForwardPropGenerator from \"../HelperGenerators/ForwardPropGenerator\"\n\nexport default class CompGenerator extends ForwardPropGenerator {\n  run() {\n    let { content, props } = this.viewParticle as CompParticle\n    content = this.alterPropView(content)\n    props = this.alterPropViews(props)\n    const { tag, children } = this.viewParticle as CompParticle\n\n    const dlNodeName = this.generateNodeName()\n\n    this.addInitStatement(\n      this.declareCompNode(dlNodeName, tag, content, props, children)\n    )\n    // ---- Resolve content\n    if (content) {\n      const { value, dependencyIndexArr } = content\n      if (dependencyIndexArr && dependencyIndexArr.length > 0) {\n        this.addUpdateStatements(\n          dependencyIndexArr,\n          this.setCompContent(dlNodeName, value)\n        )\n      }\n    }\n\n    // ---- Resolve props\n    if (props) {\n      Object.entries(props).forEach(([key, { value, dependencyIndexArr }]) => {\n        if (key === \"do\") {\n          const statement = this.addDo(dlNodeName, value)\n          this.addInitStatement(statement)\n          this.addUpdateStatements(dependencyIndexArr, statement)\n          return\n        }\n        if (key === \"element\") {\n          const statement = this.setElement(dlNodeName, value, true)\n          this.addInitStatement(statement)\n          this.addUpdateStatements(dependencyIndexArr, statement)\n          return\n        }\n        if (key === \"forwardProps\") return\n        if (dependencyIndexArr && dependencyIndexArr.length > 0) {\n          this.addUpdateStatements(\n            dependencyIndexArr,\n            this.setCompProp(dlNodeName, key, value)\n          )\n        }\n      })\n    }\n\n    return dlNodeName\n  }\n\n  /**\n   * @View\n   * null\n   *  or\n   * { prop1: xxx, prop2: xxx, ... }\n   */\n  private generateCompProps(\n    props?: Record<string, DependencyProp>\n  ): t.Expression {\n    if (!props || Object.keys(props).length === 0) return this.t.nullLiteral()\n    return this.t.objectExpression(\n      Object.entries(props).map(([key, { value }]) =>\n        this.t.objectProperty(this.t.identifier(key), value)\n      )\n    )\n  }\n\n  /**\n   * @View\n   * const ${dlNodeName} = new ${tag}(${props}, ${content}, ${children}, ${this})\n   */\n  private declareCompNode(\n    dlNodeName: string,\n    tag: t.Expression,\n    content?: DependencyProp,\n    props?: Record<string, DependencyProp>,\n    children?: ViewParticle[]\n  ): t.VariableDeclaration {\n    let willForwardProps = false\n    if (props) {\n      if (\"forwardProps\" in props) willForwardProps = true\n      props = Object.fromEntries(\n        Object.entries(props).filter(\n          ([key]) => ![\"do\", \"element\", \"forwardProps\"].includes(key)\n        )\n      )\n    }\n    return this.t.variableDeclaration(\"const\", [\n      this.t.variableDeclarator(\n        this.t.identifier(dlNodeName),\n        this.t.newExpression(tag, [\n          this.generateCompProps(props),\n          content?.value ?? this.t.nullLiteral(),\n          children && children.length > 0\n            ? this.t.identifier(this.declarePropView(children))\n            : this.t.nullLiteral(),\n          willForwardProps ? this.t.identifier(\"this\") : this.t.nullLiteral(),\n        ])\n      ),\n    ])\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}._$setContent(${value})\n   */\n  private setCompContent(dlNodeName: string, value: t.Expression): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(\n        this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(\"_$setContent\")\n        ),\n        [value]\n      )\n    )\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}._$setProp(${key}, ${value})\n   */\n  private setCompProp(\n    dlNodeName: string,\n    key: string,\n    value: t.Expression\n  ): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(\n        this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(\"_$setProp\")\n        ),\n        [this.t.stringLiteral(key), value]\n      )\n    )\n  }\n}\n","/**\n * @brief HTML internal attribute map, can be accessed as js property\n */\nconst attributeMap = {\n  // ---- Other property as attribute\n  textContent: [\"*\"],\n  innerHTML: [\"*\"],\n  // ---- Source: https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes\n  accept: [\"form\", \"input\"],\n  // ---- Original: accept-charset\n  acceptCharset: [\"form\"],\n  accesskey: [\"*\"],\n  action: [\"form\"],\n  align: [\n    \"caption\",\n    \"col\",\n    \"colgroup\",\n    \"hr\",\n    \"iframe\",\n    \"img\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"tr\",\n  ],\n  allow: [\"iframe\"],\n  alt: [\"area\", \"img\", \"input\"],\n  async: [\"script\"],\n  autocapitalize: [\"*\"],\n  autocomplete: [\"form\", \"input\", \"select\", \"textarea\"],\n  autofocus: [\"button\", \"input\", \"select\", \"textarea\"],\n  autoplay: [\"audio\", \"video\"],\n  background: [\"body\", \"table\", \"td\", \"th\"],\n  // ---- Original: base\n  bgColor: [\n    \"body\",\n    \"col\",\n    \"colgroup\",\n    \"marquee\",\n    \"table\",\n    \"tbody\",\n    \"tfoot\",\n    \"td\",\n    \"th\",\n    \"tr\",\n  ],\n  border: [\"img\", \"object\", \"table\"],\n  buffered: [\"audio\", \"video\"],\n  capture: [\"input\"],\n  charset: [\"meta\"],\n  checked: [\"input\"],\n  cite: [\"blockquote\", \"del\", \"ins\", \"q\"],\n  class: [\"*\"],\n  color: [\"font\", \"hr\"],\n  cols: [\"textarea\"],\n  // ---- Original: colspan\n  colSpan: [\"td\", \"th\"],\n  content: [\"meta\"],\n  // ---- Original: contenteditable\n  contentEditable: [\"*\"],\n  contextmenu: [\"*\"],\n  controls: [\"audio\", \"video\"],\n  coords: [\"area\"],\n  crossOrigin: [\"audio\", \"img\", \"link\", \"script\", \"video\"],\n  csp: [\"iframe\"],\n  data: [\"object\"],\n  // ---- Original: datetime\n  dateTime: [\"del\", \"ins\", \"time\"],\n  decoding: [\"img\"],\n  default: [\"track\"],\n  defer: [\"script\"],\n  dir: [\"*\"],\n  dirname: [\"input\", \"textarea\"],\n  disabled: [\n    \"button\",\n    \"fieldset\",\n    \"input\",\n    \"optgroup\",\n    \"option\",\n    \"select\",\n    \"textarea\",\n  ],\n  download: [\"a\", \"area\"],\n  draggable: [\"*\"],\n  enctype: [\"form\"],\n  // ---- Original: enterkeyhint\n  enterKeyHint: [\"textarea\", \"contenteditable\"],\n  for: [\"label\", \"output\"],\n  form: [\n    \"button\",\n    \"fieldset\",\n    \"input\",\n    \"label\",\n    \"meter\",\n    \"object\",\n    \"output\",\n    \"progress\",\n    \"select\",\n    \"textarea\",\n  ],\n  // ---- Original: formaction\n  formAction: [\"input\", \"button\"],\n  // ---- Original: formenctype\n  formEnctype: [\"button\", \"input\"],\n  // ---- Original: formmethod\n  formMethod: [\"button\", \"input\"],\n  // ---- Original: formnovalidate\n  formNoValidate: [\"button\", \"input\"],\n  // ---- Original: formtarget\n  formTarget: [\"button\", \"input\"],\n  headers: [\"td\", \"th\"],\n  height: [\"canvas\", \"embed\", \"iframe\", \"img\", \"input\", \"object\", \"video\"],\n  hidden: [\"*\"],\n  high: [\"meter\"],\n  href: [\"a\", \"area\", \"base\", \"link\"],\n  hreflang: [\"a\", \"link\"],\n  // ---- Original: http-equiv\n  httpEquiv: [\"meta\"],\n  id: [\"*\"],\n  integrity: [\"link\", \"script\"],\n  // ---- Original: intrinsicsize\n  intrinsicSize: [\"img\"],\n  // ---- Original: inputmode\n  inputMode: [\"textarea\", \"contenteditable\"],\n  ismap: [\"img\"],\n  // ---- Original: itemprop\n  itemProp: [\"*\"],\n  kind: [\"track\"],\n  label: [\"optgroup\", \"option\", \"track\"],\n  lang: [\"*\"],\n  language: [\"script\"],\n  loading: [\"img\", \"iframe\"],\n  list: [\"input\"],\n  loop: [\"audio\", \"marquee\", \"video\"],\n  low: [\"meter\"],\n  manifest: [\"html\"],\n  max: [\"input\", \"meter\", \"progress\"],\n  // ---- Original: maxlength\n  maxLength: [\"input\", \"textarea\"],\n  // ---- Original: minlength\n  minLength: [\"input\", \"textarea\"],\n  media: [\"a\", \"area\", \"link\", \"source\", \"style\"],\n  method: [\"form\"],\n  min: [\"input\", \"meter\"],\n  multiple: [\"input\", \"select\"],\n  muted: [\"audio\", \"video\"],\n  name: [\n    \"button\",\n    \"form\",\n    \"fieldset\",\n    \"iframe\",\n    \"input\",\n    \"object\",\n    \"output\",\n    \"select\",\n    \"textarea\",\n    \"map\",\n    \"meta\",\n    \"param\",\n  ],\n  // ---- Original: novalidate\n  noValidate: [\"form\"],\n  open: [\"details\", \"dialog\"],\n  optimum: [\"meter\"],\n  pattern: [\"input\"],\n  ping: [\"a\", \"area\"],\n  placeholder: [\"input\", \"textarea\"],\n  // ---- Original: playsinline\n  playsInline: [\"video\"],\n  poster: [\"video\"],\n  preload: [\"audio\", \"video\"],\n  readonly: [\"input\", \"textarea\"],\n  // ---- Original: referrerpolicy\n  referrerPolicy: [\"a\", \"area\", \"iframe\", \"img\", \"link\", \"script\"],\n  rel: [\"a\", \"area\", \"link\"],\n  required: [\"input\", \"select\", \"textarea\"],\n  reversed: [\"ol\"],\n  role: [\"*\"],\n  rows: [\"textarea\"],\n  // ---- Original: rowspan\n  rowSpan: [\"td\", \"th\"],\n  sandbox: [\"iframe\"],\n  scope: [\"th\"],\n  scoped: [\"style\"],\n  selected: [\"option\"],\n  shape: [\"a\", \"area\"],\n  size: [\"input\", \"select\"],\n  sizes: [\"link\", \"img\", \"source\"],\n  slot: [\"*\"],\n  span: [\"col\", \"colgroup\"],\n  spellcheck: [\"*\"],\n  src: [\n    \"audio\",\n    \"embed\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"script\",\n    \"source\",\n    \"track\",\n    \"video\",\n  ],\n  srcdoc: [\"iframe\"],\n  srclang: [\"track\"],\n  srcset: [\"img\", \"source\"],\n  start: [\"ol\"],\n  step: [\"input\"],\n  style: [\"*\"],\n  summary: [\"table\"],\n  // ---- Original: tabindex\n  tabIndex: [\"*\"],\n  target: [\"a\", \"area\", \"base\", \"form\"],\n  title: [\"*\"],\n  translate: [\"*\"],\n  type: [\n    \"button\",\n    \"input\",\n    \"embed\",\n    \"object\",\n    \"ol\",\n    \"script\",\n    \"source\",\n    \"style\",\n    \"menu\",\n    \"link\",\n  ],\n  usemap: [\"img\", \"input\", \"object\"],\n  value: [\n    \"button\",\n    \"data\",\n    \"input\",\n    \"li\",\n    \"meter\",\n    \"option\",\n    \"progress\",\n    \"param\",\n    \"text\" /** extra for TextNode */,\n  ],\n  width: [\"canvas\", \"embed\", \"iframe\", \"img\", \"input\", \"object\", \"video\"],\n  wrap: [\"textarea\"],\n}\n\nconst elementAttributeMap = Object.entries(attributeMap).reduce<\n  Record<string, string[]>\n>((acc, [key, elements]) => {\n  elements.forEach(element => {\n    if (!acc[element]) acc[element] = []\n    acc[element].push(key)\n  })\n  return acc\n}, {})\n\n/**\n * @brief Check if the attribute is internal, i.e., can be accessed as js property\n * @param tag\n * @param attribute\n * @returns true if the attribute is internal\n */\nexport function isInternalAttribute(tag: string, attribute: string): boolean {\n  return (\n    elementAttributeMap[\"*\"].includes(attribute) ||\n    elementAttributeMap[tag]?.includes(attribute)\n  )\n}\n","import { type types as t } from \"@babel/core\"\nimport { DLError } from \"../error\"\nimport { isInternalAttribute } from \"../attr\"\nimport ForwardPropGenerator from \"./ForwardPropGenerator\"\n\nexport default class HTMLPropGenerator extends ForwardPropGenerator {\n  /**\n   * @brief Add any HTML props according to the key\n   * @param name\n   * @param tag\n   * @param key\n   * @param value\n   * @param dependencyIndexArr\n   * @returns t.Statement\n   */\n  addHTMLProp(\n    name: string,\n    tag: string,\n    key: string,\n    value: t.Expression,\n    dependencyIndexArr: number[] | undefined\n  ): t.Statement {\n    // ---- Dynamic HTML prop with init and update\n    if (dependencyIndexArr && dependencyIndexArr.length > 0) {\n      const statement = this.setDynamicHTMLProp(name, tag, key, value)\n      this.addUpdateStatements(dependencyIndexArr, statement)\n      return statement\n    }\n    // ---- Static HTML prop with init only\n    return this.setStaticHTMLProp(name, tag, key, value)\n  }\n\n  /**\n   * @View\n   * insertNode(${dlNodeName}, ${childNodeName}, ${position})\n   */\n  insertNode(\n    dlNodeName: string,\n    childNodeName: string,\n    position: number\n  ): t.ExpressionStatement {\n    return this.t.expressionStatement(\n      this.t.callExpression(this.t.identifier(this.importMap.insertNode), [\n        this.t.identifier(dlNodeName),\n        this.t.identifier(childNodeName),\n        this.t.numericLiteral(position),\n      ])\n    )\n  }\n\n  /**\n   * @View\n   * setStyle(${dlNodeName}, ${value})\n   */\n  private setHTMLStyle(dlNodeName: string, value: t.Expression): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(this.t.identifier(this.importMap.setStyle), [\n        this.t.identifier(dlNodeName),\n        value,\n      ])\n    )\n  }\n\n  /**\n   * @View\n   * setStyle(${dlNodeName}, ${value})\n   */\n  private setHTMLDataset(dlNodeName: string, value: t.Expression): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(this.t.identifier(this.importMap.setDataset), [\n        this.t.identifier(dlNodeName),\n        value,\n      ])\n    )\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}.${key} = ${value}\n   */\n  private setHTMLProp(\n    dlNodeName: string,\n    key: string,\n    value: t.Expression\n  ): t.Statement {\n    return this.t.expressionStatement(\n      this.t.assignmentExpression(\n        \"=\",\n        this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(key)\n        ),\n        value\n      )\n    )\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}.setAttribute(${key}, ${value})\n   */\n  private setHTMLAttr(\n    dlNodeName: string,\n    key: string,\n    value: t.Expression\n  ): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(\n        this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(\"setAttribute\")\n        ),\n        [this.t.stringLiteral(key), value]\n      )\n    )\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}.addEventListener(${key}, ${value})\n   */\n  private setHTMLEvent(\n    dlNodeName: string,\n    key: string,\n    value: t.Expression\n  ): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(\n        this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(\"addEventListener\")\n        ),\n        [this.t.stringLiteral(key), value]\n      )\n    )\n  }\n\n  /**\n   * @View\n   * setEvent(${dlNodeName}, ${key}, ${value})\n   */\n  private setEvent(\n    dlNodeName: string,\n    key: string,\n    value: t.Expression\n  ): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(this.t.identifier(this.importMap.setEvent), [\n        this.t.identifier(dlNodeName),\n        this.t.stringLiteral(key),\n        value,\n      ])\n    )\n  }\n\n  /**\n   * @View\n   * setHTMLProp(${dlNodeName}, ${key}, ${value})\n   */\n  private setCachedProp(\n    dlNodeName: string,\n    key: string,\n    value: t.Expression\n  ): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(this.t.identifier(this.importMap.setHTMLProp), [\n        this.t.identifier(dlNodeName),\n        this.t.stringLiteral(key),\n        value,\n      ])\n    )\n  }\n\n  /**\n   * @View\n   * setHTMLAttr(${dlNodeName}, ${key}, ${value})\n   */\n  private setCachedAttr(\n    dlNodeName: string,\n    key: string,\n    value: t.Expression\n  ): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(this.t.identifier(this.importMap.setHTMLAttr), [\n        this.t.identifier(dlNodeName),\n        this.t.stringLiteral(key),\n        value,\n      ])\n    )\n  }\n\n  /**\n   * @View\n   * ${setHTMLProps}(${dlNodeName}, ${value})\n   */\n  private setHTMLPropObject(\n    dlNodeName: string,\n    value: t.Expression\n  ): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(this.t.identifier(this.importMap.setHTMLProps), [\n        this.t.identifier(dlNodeName),\n        value,\n      ])\n    )\n  }\n\n  /**\n   * @View\n   * ${setHTMLAttrs}(${dlNodeName}, ${value})\n   */\n  private setHTMLAttrObject(\n    dlNodeName: string,\n    value: t.Expression\n  ): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(this.t.identifier(this.importMap.setHTMLAttrs), [\n        this.t.identifier(dlNodeName),\n        value,\n      ])\n    )\n  }\n\n  private readonly commonHTMLPropKeys = [\n    \"style\",\n    \"dataset\",\n    \"element\",\n    \"prop\",\n    \"attr\",\n    \"forwardProps\",\n  ]\n\n  /**\n   * For style/dataset/element/attr/prop\n   */\n  private addCommonHTMLProp(\n    dlNodeName: string,\n    attrName: string,\n    value: t.Expression\n  ): t.Statement {\n    if (attrName === \"style\") return this.setHTMLStyle(dlNodeName, value)\n    if (attrName === \"dataset\") return this.setHTMLDataset(dlNodeName, value)\n    if (attrName === \"element\") return this.setElement(dlNodeName, value)\n    if (attrName === \"prop\") return this.setHTMLPropObject(dlNodeName, value)\n    if (attrName === \"attr\") return this.setHTMLAttrObject(dlNodeName, value)\n    if (attrName === \"forwardProps\") return this.forwardProps(dlNodeName)\n    return DLError.throw2()\n  }\n\n  /**\n   * @View\n   * 1. Event listener\n   *  - ${dlNodeName}.addEventListener(${key}, ${value})\n   * 2. HTML internal attribute -> DOM property\n   *  - ${dlNodeName}.${key} = ${value}\n   * 3. HTML custom attribute\n   *  - ${dlNodeName}.setAttribute(${key}, ${value})\n   */\n  private setStaticHTMLProp(\n    dlNodeName: string,\n    tag: string,\n    attrName: string,\n    value: t.Expression\n  ): t.Statement {\n    if (this.commonHTMLPropKeys.includes(attrName))\n      return this.addCommonHTMLProp(dlNodeName, attrName, value)\n    if (attrName.startsWith(\"on\")) {\n      const eventName = attrName.slice(2).toLowerCase()\n      return this.setHTMLEvent(dlNodeName, eventName, value)\n    }\n    if (isInternalAttribute(tag, attrName)) {\n      if (attrName === \"class\") attrName = \"className\"\n      else if (attrName === \"for\") attrName = \"htmlFor\"\n      return this.setHTMLProp(dlNodeName, attrName, value)\n    }\n    return this.setHTMLAttr(dlNodeName, attrName, value)\n  }\n\n  /**\n   * @View\n   * 1. Event listener\n   *  - ${setEvent}(${dlNodeName}, ${key}, ${value})\n   * 2. HTML internal attribute -> DOM property\n   *  - ${setHTMLProp}(${dlNodeName}, ${key}, ${value})\n   * 3. HTML custom attribute\n   *  - ${setHTMLAttr}(${dlNodeName}, ${key}, ${value})\n   */\n  private setDynamicHTMLProp(\n    dlNodeName: string,\n    tag: string,\n    attrName: string,\n    value: t.Expression\n  ): t.Statement {\n    if (this.commonHTMLPropKeys.includes(attrName))\n      return this.addCommonHTMLProp(dlNodeName, attrName, value)\n    if (attrName.startsWith(\"on\")) {\n      const eventName = attrName.slice(2).toLowerCase()\n      return this.setEvent(dlNodeName, eventName, value)\n    }\n    if (isInternalAttribute(tag, attrName)) {\n      if (attrName === \"class\") attrName = \"className\"\n      else if (attrName === \"for\") attrName = \"htmlFor\"\n      return this.setCachedProp(dlNodeName, attrName, value)\n    }\n    return this.setCachedAttr(dlNodeName, attrName, value)\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport { type HTMLParticle } from \"@dlightjs/reactivity-parser\"\nimport HTMLPropGenerator from \"../HelperGenerators/HTMLPropGenerator\"\n\nexport default class HTMLGenerator extends HTMLPropGenerator {\n  run() {\n    const { tag, props, children } = this.viewParticle as HTMLParticle\n\n    const dlNodeName = this.generateNodeName()\n\n    this.addInitStatement(this.declareHTMLNode(dlNodeName, tag))\n\n    // ---- Resolve props\n    if (props) {\n      // ---- Use the tag name to check if the prop is internal for the tag,\n      //      for dynamic tag, we can't check it, so we just assume it's not internal\n      //      represent by the \"ANY\" tag name\n      const tagName = this.t.isStringLiteral(tag) ? tag.value : \"ANY\"\n      Object.entries(props).forEach(([key, { value, dependencyIndexArr }]) => {\n        this.addInitStatement(\n          this.addHTMLProp(dlNodeName, tagName, key, value, dependencyIndexArr)\n        )\n      })\n    }\n\n    // ---- Resolve children\n    if (children) {\n      const childNames: string[] = []\n      children.forEach((child, idx) => {\n        const [initStatements, childName] = this.generateChild(child)\n        childNames.push(childName)\n        this.addInitStatement(...initStatements)\n        if (child.type === \"html\")\n          this.addInitStatement(this.appendChild(dlNodeName, childName))\n        else this.addInitStatement(this.insertNode(dlNodeName, childName, idx))\n      })\n      this.addInitStatement(this.setHTMLNodes(dlNodeName, childNames))\n    }\n\n    return dlNodeName\n  }\n\n  /**\n   * @View\n   * const ${dlNodeName} = createElement(${tag})\n   */\n  private declareHTMLNode(dlNodeName: string, tag: t.Expression): t.Statement {\n    return this.t.variableDeclaration(\"const\", [\n      this.t.variableDeclarator(\n        this.t.identifier(dlNodeName),\n        this.t.callExpression(this.t.identifier(this.importMap.createElement), [\n          tag,\n        ])\n      ),\n    ])\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}._$nodes = [...${childNames}]\n   */\n  private setHTMLNodes(dlNodeName: string, childNames: string[]): t.Statement {\n    return this.t.expressionStatement(\n      this.t.assignmentExpression(\n        \"=\",\n        this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(\"_$nodes\")\n        ),\n        this.t.arrayExpression(childNames.map(name => this.t.identifier(name)))\n      )\n    )\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}.appendChild(${childNodeName})\n   */\n  private appendChild(dlNodeName: string, childNodeName: string): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(\n        this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(\"appendChild\")\n        ),\n        [this.t.identifier(childNodeName)]\n      )\n    )\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport { type TemplateParticle } from \"@dlightjs/reactivity-parser\"\nimport HTMLPropGenerator from \"../HelperGenerators/HTMLPropGenerator\"\n\nexport default class TemplateGenerator extends HTMLPropGenerator {\n  run() {\n    const { template, mutableParticles, props } = this\n      .viewParticle as TemplateParticle\n\n    const dlNodeName = this.generateNodeName()\n    // ---- Add template declaration to class\n    const templateName = this.addTemplate(template)\n    // ---- Declare template node in View body\n    this.addInitStatement(this.declareTemplateNode(dlNodeName, templateName))\n\n    // ---- Insert elements first\n    const paths: number[][] = []\n    props.forEach(({ path }) => {\n      paths.push(path)\n    })\n    mutableParticles.forEach(({ path }) => {\n      paths.push(path.slice(0, -1))\n    })\n    const [insertElementStatements, pathNameMap] = this.insertElements(\n      paths,\n      dlNodeName\n    )\n    this.addInitStatement(...insertElementStatements)\n\n    // ---- Resolve props\n    props.forEach(({ tag, path, key, value, dependencyIndexArr }) => {\n      const name = pathNameMap[path.join(\".\")]\n      this.addInitStatement(\n        this.addHTMLProp(name, tag, key, value, dependencyIndexArr)\n      )\n    })\n\n    // ---- Resolve mutable particles\n    mutableParticles.forEach(particle => {\n      const path = particle.path\n      // ---- Find parent htmlElement\n      const parentName = pathNameMap[path.slice(0, -1).join(\".\")]\n      const [initStatements, childName] = this.generateChild(particle)\n      this.addInitStatement(...initStatements)\n      this.addInitStatement(\n        this.insertNode(parentName, childName, path[path.length - 1])\n      )\n    })\n\n    return dlNodeName\n  }\n\n  /**\n   * @View\n   * static ${templateName} = ${createTemplate}(${templateString})\n   */\n  private addTemplate(template: string): string {\n    const templateName = this.generateTemplateName()\n    this.addStaticClassProperty(\n      templateName,\n      this.t.callExpression(this.t.identifier(this.importMap.createTemplate), [\n        this.t.stringLiteral(template),\n      ])\n    )\n\n    return templateName\n  }\n\n  /**\n   * @View\n   * const ${dlNodeName} = ${this.className}.${templateName}()\n   */\n  private declareTemplateNode(\n    dlNodeName: string,\n    templateName: string\n  ): t.Statement {\n    return this.t.variableDeclaration(\"const\", [\n      this.t.variableDeclarator(\n        this.t.identifier(dlNodeName),\n        this.t.callExpression(\n          this.t.memberExpression(\n            this.t.identifier(this.className),\n            this.t.identifier(templateName)\n          ),\n          []\n        )\n      ),\n    ])\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}.firstChild\n   *  or\n   * ${dlNodeName}.firstChild.nextSibling\n   *  or\n   * ...\n   * ${dlNodeName}.childNodes[${num}]\n   */\n  private insertElement(\n    dlNodeName: string,\n    path: number[],\n    offset: number\n  ): t.Statement {\n    const newNodeName = this.generateNodeName()\n    if (path.length === 0) {\n      return this.t.variableDeclaration(\"const\", [\n        this.t.variableDeclarator(\n          this.t.identifier(newNodeName),\n          Array.from({ length: offset }).reduce(\n            (acc: t.Expression) =>\n              this.t.memberExpression(acc, this.t.identifier(\"nextSibling\")),\n            this.t.identifier(dlNodeName)\n          )\n        ),\n      ])\n    }\n    const addFirstChild = (object: t.Expression) =>\n      // ---- ${object}.firstChild\n      this.t.memberExpression(object, this.t.identifier(\"firstChild\"))\n    const addSecondChild = (object: t.Expression) =>\n      // ---- ${object}.firstChild.nextSibling\n      this.t.memberExpression(\n        addFirstChild(object),\n        this.t.identifier(\"nextSibling\")\n      )\n    const addThirdChild = (object: t.Expression) =>\n      // ---- ${object}.firstChild.nextSibling.nextSibling\n      this.t.memberExpression(\n        addSecondChild(object),\n        this.t.identifier(\"nextSibling\")\n      )\n    const addOtherChild = (object: t.Expression, num: number) =>\n      // ---- ${object}.childNodes[${num}]\n      this.t.memberExpression(\n        this.t.memberExpression(object, this.t.identifier(\"childNodes\")),\n        this.t.numericLiteral(num),\n        true\n      )\n    const addNextSibling = (object: t.Expression) =>\n      // ---- ${object}.nextSibling\n      this.t.memberExpression(object, this.t.identifier(\"nextSibling\"))\n    return this.t.variableDeclaration(\"const\", [\n      this.t.variableDeclarator(\n        this.t.identifier(newNodeName),\n        path.reduce((acc: t.Expression, cur: number, idx) => {\n          if (idx === 0 && offset > 0) {\n            for (let i = 0; i < offset; i++) acc = addNextSibling(acc)\n          }\n          if (cur === 0) return addFirstChild(acc)\n          if (cur === 1) return addSecondChild(acc)\n          if (cur === 2) return addThirdChild(acc)\n          return addOtherChild(acc, cur)\n        }, this.t.identifier(dlNodeName))\n      ),\n    ])\n  }\n\n  /**\n   * @brief Insert elements to the template node from the paths\n   * @param paths\n   * @param dlNodeName\n   * @returns\n   */\n  private insertElements(\n    paths: number[][],\n    dlNodeName: string\n  ): [t.Statement[], Record<string, string>] {\n    const [statements, collect] = HTMLPropGenerator.statementsCollector()\n    const nameMap: Record<string, number[]> = { [dlNodeName]: [] }\n\n    const commonPrefixPaths = TemplateGenerator.pathWithCommonPrefix(paths)\n\n    commonPrefixPaths.forEach(path => {\n      const res = TemplateGenerator.findBestNodeAndPath(\n        nameMap,\n        path,\n        dlNodeName\n      )\n      const [, pat, offset] = res\n      let name = res[0]\n\n      if (pat.length !== 0 || offset !== 0) {\n        collect(this.insertElement(name, pat, offset))\n        name = this.generateNodeName(this.nodeIdx)\n        nameMap[name] = path\n      }\n    })\n    const pathNameMap = Object.fromEntries(\n      Object.entries(nameMap).map(([name, path]) => [path.join(\".\"), name])\n    )\n\n    return [statements, pathNameMap]\n  }\n\n  // ---- Path related\n  /**\n   * @brief Extract common prefix from paths\n   *  e.g.\n   *    [0, 1, 2, 3] + [0, 1, 2, 4] => [0, 1, 2], [0, 1, 2, 3], [0, 1, 2, 4]\n   *  [0, 1, 2] is the common prefix\n   * @param paths\n   * @returns paths with common prefix\n   */\n  private static pathWithCommonPrefix(paths: number[][]): number[][] {\n    const allPaths = [...paths]\n    paths.forEach(path0 => {\n      paths.forEach(path1 => {\n        if (path0 === path1) return\n        for (let i = 0; i < path0.length; i++) {\n          if (path0[i] !== path1[i]) {\n            if (i !== 0) {\n              allPaths.push(path0.slice(0, i))\n            }\n            break\n          }\n        }\n      })\n    })\n\n    // ---- Sort by length and then by first element, small to large\n    const sortedPaths = allPaths.sort((a, b) => {\n      if (a.length !== b.length) return a.length - b.length\n      return a[0] - b[0]\n    })\n\n    // ---- Deduplicate\n    const deduplicatedPaths = [\n      ...new Set(sortedPaths.map(path => path.join(\".\"))),\n    ].map(path => path.split(\".\").filter(Boolean).map(Number))\n\n    return deduplicatedPaths\n  }\n\n  /**\n   * @brief Find the best node name and path for the given path by looking into the nameMap.\n   *  If there's a full match, return the name and an empty path\n   *  If there's a partly match, return the name and the remaining path\n   *  If there's a nextSibling match, return the name and the remaining path with sibling offset\n   * @param nameMap\n   * @param path\n   * @param defaultName\n   * @returns [name, path, siblingOffset]\n   */\n  private static findBestNodeAndPath(\n    nameMap: Record<string, number[]>,\n    path: number[],\n    defaultName: string\n  ): [string, number[], number] {\n    let bestMatchCount = 0\n    let bestMatchName: string | undefined\n    let bestHalfMatch: [string, number, number] | undefined\n    Object.entries(nameMap).forEach(([name, pat]) => {\n      let matchCount = 0\n      const pathLength = pat.length\n      for (let i = 0; i < pathLength; i++) {\n        if (pat[i] === path[i]) matchCount++\n      }\n      if (matchCount === pathLength - 1) {\n        const offset = path[pathLength - 1] - pat[pathLength - 1]\n        if (offset > 0 && offset <= 3) {\n          bestHalfMatch = [name, matchCount, offset]\n        }\n      }\n      if (matchCount !== pat.length) return\n      if (matchCount > bestMatchCount) {\n        bestMatchName = name\n        bestMatchCount = matchCount\n      }\n    })\n    if (!bestMatchName) {\n      if (bestHalfMatch) {\n        return [\n          bestHalfMatch[0],\n          path.slice(bestHalfMatch[1] + 1),\n          bestHalfMatch[2],\n        ]\n      }\n      return [defaultName, path, 0]\n    }\n    return [bestMatchName, path.slice(bestMatchCount), 0]\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport BaseGenerator from \"../HelperGenerators/BaseGenerator\"\nimport {\n  type ForParticle,\n  type ViewParticle,\n} from \"@dlightjs/reactivity-parser\"\n\nexport default class ForGenerator extends BaseGenerator {\n  run() {\n    const { item, array, key, children } = this.viewParticle as ForParticle\n\n    const dlNodeName = this.generateNodeName()\n\n    // ---- Declare for node\n    this.addInitStatement(\n      this.declareForNode(\n        dlNodeName,\n        array.value,\n        item,\n        children,\n        BaseGenerator.calcDependencyNum(array.dependencyIndexArr),\n        key\n      )\n    )\n\n    // ---- Update statements\n    this.addUpdateStatements(\n      array.dependencyIndexArr,\n      this.updateForNode(dlNodeName, array.value, item, key)\n    )\n    this.addUpdateStatementsWithoutDep(this.updateForNodeItem(dlNodeName))\n\n    return dlNodeName\n  }\n\n  /**\n   * @View\n   * const ${dlNodeName} = new ForNode(${array}, ${item} => {\n   *   ${children}\n   *   const $update = (changed, ${item}) => {\n   *      if (changed & ${depNum}) {\n   *        ${statements}\n   *      }\n   *      ${statements}\n   *   }\n   *   ${topLevelNodes[0])._$updateFunc = $update\n   *   return [...${topLevelNodes}]\n   * }, ${depNum}, ${array}.map(${item} => ${key}))\n   */\n  private declareForNode(\n    dlNodeName: string,\n    array: t.Expression,\n    item: t.LVal,\n    children: ViewParticle[],\n    depNum: number,\n    key?: t.Expression\n  ): t.VariableDeclaration {\n    // ---- NodeFunc\n    const [childStatements, topLevelNodes, updateStatements] =\n      this.generateChildren(children, false)\n\n    // ---- Update func\n    if (Object.keys(updateStatements).length > 0) {\n      childStatements.push(\n        this.t.expressionStatement(\n          this.t.assignmentExpression(\n            \"=\",\n            this.t.memberExpression(\n              this.t.identifier(topLevelNodes[0]),\n              this.t.identifier(\"_$updateFunc\")\n            ),\n            this.t.arrowFunctionExpression(\n              [this.t.identifier(\"changed\"), item as any],\n              this.geneUpdateBody(updateStatements)\n            )\n          )\n        )\n      )\n    }\n\n    // ---- Return statement\n    childStatements.push(this.generateReturnStatement(topLevelNodes))\n\n    return this.t.variableDeclaration(\"const\", [\n      this.t.variableDeclarator(\n        this.t.identifier(dlNodeName),\n        this.t.newExpression(this.t.identifier(this.importMap.ForNode), [\n          array,\n          this.t.arrowFunctionExpression(\n            [item as any],\n            this.t.blockStatement(childStatements)\n          ),\n          this.t.numericLiteral(depNum),\n          ...this.getForKeyStatement(array, item, key),\n        ])\n      ),\n    ])\n  }\n\n  /**\n   * @View\n   * ${array}.map(${item} => ${key})\n   */\n  private getForKeyStatement(\n    array: t.Expression,\n    item: t.LVal,\n    key?: t.Expression\n  ): t.Expression[] {\n    if (key) {\n      return [\n        this.t.callExpression(\n          this.t.memberExpression(array, this.t.identifier(\"map\")),\n          [this.t.arrowFunctionExpression([item as any], key)]\n        ),\n      ]\n    }\n    return []\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}.updateArray(${array}, ${array}.map(${item} => ${key}))\n   */\n  private updateForNode(\n    dlNodeName: string,\n    array: t.Expression,\n    item: t.LVal,\n    key?: t.Expression\n  ): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(\n        this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(\"updateArray\")\n        ),\n        [array, ...this.getForKeyStatement(array, item, key)]\n      )\n    )\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}.update(changed)\n   */\n  private updateForNodeItem(dlNodeName: string): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(\n        this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(\"update\")\n        ),\n        [this.t.identifier(\"changed\")]\n      )\n    )\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport BaseGenerator from \"./BaseGenerator\"\n\nexport default class CondGenerator extends BaseGenerator {\n  /**\n   * @View\n   * $thisCond.cond = ${idx}\n   */\n  geneCondIdx(idx: number): t.ExpressionStatement {\n    return this.t.expressionStatement(\n      this.t.assignmentExpression(\n        \"=\",\n        this.t.memberExpression(\n          this.t.identifier(\"$thisCond\"),\n          this.t.identifier(\"cond\")\n        ),\n        this.t.numericLiteral(idx)\n      )\n    )\n  }\n\n  /**\n   * @View\n   * if ($thisCond.cond === ${idx}) {\n   *  $thisCond.didntChange = true\n   *  return []\n   * }\n   */\n  geneCondCheck(idx: number): t.IfStatement {\n    return this.t.ifStatement(\n      this.t.binaryExpression(\n        \"===\",\n        this.t.memberExpression(\n          this.t.identifier(\"$thisCond\"),\n          this.t.identifier(\"cond\")\n        ),\n        this.t.numericLiteral(idx)\n      ),\n      this.t.blockStatement([\n        this.t.expressionStatement(\n          this.t.assignmentExpression(\n            \"=\",\n            this.t.memberExpression(\n              this.t.identifier(\"$thisCond\"),\n              this.t.identifier(\"didntChange\")\n            ),\n            this.t.booleanLiteral(true)\n          )\n        ),\n        this.t.returnStatement(this.t.arrayExpression([])),\n      ])\n    )\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}.updateCond()\n   */\n  updateCondNodeCond(dlNodeName: string): t.ExpressionStatement {\n    return this.t.expressionStatement(\n      this.t.callExpression(\n        this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(\"updateCond\")\n        ),\n        []\n      )\n    )\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}.update(changed)\n   */\n  updateCondNode(dlNodeName: string): t.ExpressionStatement {\n    return this.t.expressionStatement(\n      this.t.callExpression(\n        this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(\"update\")\n        ),\n        [this.t.identifier(\"changed\")]\n      )\n    )\n  }\n\n  /**\n   * @View\n   * const ${dlNodeName} = new CondNode(($thisCond) => {}, ${depNum})\n   */\n  declareCondNode(\n    dlNodeName: string,\n    condFunc: t.BlockStatement,\n    deps: number[]\n  ): t.VariableDeclaration {\n    return this.t.variableDeclaration(\"const\", [\n      this.t.variableDeclarator(\n        this.t.identifier(dlNodeName),\n        this.t.newExpression(this.t.identifier(this.importMap.CondNode), [\n          this.t.arrowFunctionExpression(\n            [this.t.identifier(\"$thisCond\")],\n            condFunc\n          ),\n          this.t.numericLiteral(CondGenerator.calcDependencyNum(deps)),\n        ])\n      ),\n    ])\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport { type IfParticle, type IfBranch } from \"@dlightjs/reactivity-parser\"\nimport CondGenerator from \"../HelperGenerators/CondGenerator\"\n\nexport default class IfGenerator extends CondGenerator {\n  run() {\n    const { branches } = this.viewParticle as IfParticle\n    const deps = branches.flatMap(\n      ({ condition }) => condition.dependencyIndexArr ?? []\n    )\n    // ---- declareIfNode\n    const dlNodeName = this.generateNodeName()\n    this.addInitStatement(this.declareIfNode(dlNodeName, branches, deps))\n\n    this.addUpdateStatements(deps, this.updateCondNodeCond(dlNodeName))\n    this.addUpdateStatementsWithoutDep(this.updateCondNode(dlNodeName))\n\n    return dlNodeName\n  }\n\n  /**\n   * @View\n   * ${firstNode}._$updateFunc = (changed) => { ${updateStatements} }\n   */\n  private geneUpdateFunc(\n    firstNode: string,\n    updateStatements: Record<number, t.Statement[]>\n  ): t.ExpressionStatement {\n    return this.t.expressionStatement(\n      this.t.assignmentExpression(\n        \"=\",\n        this.t.memberExpression(\n          this.t.identifier(firstNode),\n          this.t.identifier(\"_$updateFunc\")\n        ),\n        this.t.arrowFunctionExpression(\n          [this.t.identifier(\"changed\")],\n          this.geneUpdateBody(updateStatements)\n        )\n      )\n    )\n  }\n\n  /**\n   * @View\n   * if (${test}) { ${body} } else { ${alternate} }\n   */\n  geneIfStatement(\n    test: t.Expression,\n    body: t.Statement[],\n    alternate: t.Statement\n  ): t.IfStatement {\n    return this.t.ifStatement(test, this.t.blockStatement(body), alternate)\n  }\n\n  /**\n   * @View\n   * const ${dlNodeName} = new IfNode(($thisCond) => {\n   *   if (cond1) {\n   *    if ($thisCond.cond === 0) return\n   *    ${children}\n   *    $thisCond.cond = 0\n   *    node0.update = () => {}\n   *    return [nodes]\n   *   } else if (cond2) {\n   *    if ($thisCond.cond === 1) return\n   *    ${children}\n   *    $thisCond.cond = 1\n   *    return [nodes]\n   *   }\n   * })\n   */\n  private declareIfNode(\n    dlNodeName: string,\n    branches: IfBranch[],\n    deps: number[]\n  ): t.Statement {\n    const ifStatement = branches\n      .reverse()\n      .reduce<any>((acc, { condition, children }, idx) => {\n        // ---- Generate children\n        const [childStatements, topLevelNodes, updateStatements] =\n          this.generateChildren(children, false)\n\n        // ---- Check cond statement\n        childStatements.unshift(this.geneCondCheck(branches.length - idx - 1))\n\n        // ---- Update func\n        if (Object.keys(updateStatements).length > 0) {\n          childStatements.push(\n            this.geneUpdateFunc(topLevelNodes[0], updateStatements)\n          )\n        }\n\n        // ---- Cond idx (reverse order)\n        childStatements.push(this.geneCondIdx(branches.length - idx - 1))\n\n        // ---- Return statement\n        childStatements.push(this.generateReturnStatement(topLevelNodes))\n\n        if (idx === 0) {\n          if (this.t.isBooleanLiteral(condition.value, { value: true })) {\n            // ---- else statement\n            return this.t.blockStatement(childStatements)\n          }\n          /**\n           * else {\n           *  thisCond.cond = -1\n           *  return []\n           * }\n           */\n          return this.geneIfStatement(\n            condition.value,\n            childStatements,\n            this.t.blockStatement([\n              this.geneCondIdx(-1),\n              this.generateReturnStatement([]),\n            ])\n          )\n        }\n        return this.geneIfStatement(condition.value, childStatements, acc)\n      }, undefined)\n\n    return this.declareCondNode(\n      dlNodeName,\n      this.t.blockStatement([ifStatement]),\n      deps\n    )\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport {\n  type ViewParticle,\n  type DependencyProp,\n  type EnvParticle,\n} from \"@dlightjs/reactivity-parser\"\nimport PropViewGenerator from \"../HelperGenerators/PropViewGenerator\"\n\nexport default class EnvGenerator extends PropViewGenerator {\n  run() {\n    let { props } = this.viewParticle as EnvParticle\n    props = this.alterPropViews(props)!\n    const { children } = this.viewParticle as EnvParticle\n\n    const dlNodeName = this.generateNodeName()\n\n    this.addInitStatement(this.declareEnvNode(dlNodeName, props))\n\n    // ---- Children\n    this.addInitStatement(this.geneEnvChildren(dlNodeName, children))\n\n    // ---- Update props\n    Object.entries(props).forEach(([key, { dependencyIndexArr, value }]) => {\n      if (!dependencyIndexArr) return\n      this.addUpdateStatements(\n        dependencyIndexArr,\n        this.updateEnvNode(dlNodeName, key, value)\n      )\n    })\n\n    return dlNodeName\n  }\n\n  /**\n   * @View\n   * { ${key}: ${value}, ... }\n   */\n  private generateEnvs(props: Record<string, DependencyProp>): t.Expression {\n    return this.t.objectExpression(\n      Object.entries(props).map(([key, { value }]) =>\n        this.t.objectProperty(this.t.identifier(key), value)\n      )\n    )\n  }\n\n  /**\n   * @View\n   * const ${dlNodeName} = new EnvNode(envs)\n   */\n  private declareEnvNode(\n    dlNodeName: string,\n    props: Record<string, DependencyProp>\n  ): t.VariableDeclaration {\n    return this.t.variableDeclaration(\"const\", [\n      this.t.variableDeclarator(\n        this.t.identifier(dlNodeName),\n        this.t.newExpression(this.t.identifier(this.importMap.EnvNode), [\n          this.generateEnvs(props),\n        ])\n      ),\n    ])\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}.initNodes([${childrenNames}])\n   */\n  private geneEnvChildren(\n    dlNodeName: string,\n    children: ViewParticle[]\n  ): t.Statement {\n    const [statements, childrenNames] = this.generateChildren(children)\n    this.addInitStatement(...statements)\n    return this.t.expressionStatement(\n      this.t.callExpression(\n        this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(\"initNodes\")\n        ),\n        [\n          this.t.arrayExpression(\n            childrenNames.map(name => this.t.identifier(name))\n          ),\n        ]\n      )\n    )\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}.updateEnv(${key}, ${value})\n   */\n  private updateEnvNode(\n    dlNodeName: string,\n    key: string,\n    value: t.Expression\n  ): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(\n        this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(\"updateEnv\")\n        ),\n        [this.t.stringLiteral(key), value]\n      )\n    )\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport { type TextParticle } from \"@dlightjs/reactivity-parser\"\nimport BaseGenerator from \"../HelperGenerators/BaseGenerator\"\n\nexport default class TextGenerator extends BaseGenerator {\n  run() {\n    const { content } = this.viewParticle as TextParticle\n\n    const dlNodeName = this.generateNodeName()\n\n    this.addInitStatement(this.declareTextNode(dlNodeName, content.value))\n\n    if (content.dependencyIndexArr && content.dependencyIndexArr.length > 0) {\n      this.addUpdateStatements(\n        content.dependencyIndexArr,\n        this.updateTextNode(dlNodeName, content.value)\n      )\n    }\n\n    return dlNodeName\n  }\n\n  /**\n   * @View\n   * const ${dlNodeName} = createTextNode(${value})\n   */\n  private declareTextNode(\n    dlNodeName: string,\n    value: t.Expression\n  ): t.Statement {\n    return this.t.variableDeclaration(\"const\", [\n      this.t.variableDeclarator(\n        this.t.identifier(dlNodeName),\n        this.t.callExpression(\n          this.t.identifier(this.importMap.createTextNode),\n          [value]\n        )\n      ),\n    ])\n  }\n\n  /**\n   * @View\n   * updateText(${dlNodeName}, ${value})\n   */\n  private updateTextNode(dlNodeName: string, value: t.Expression): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(this.t.identifier(this.importMap.updateText), [\n        this.t.identifier(dlNodeName),\n        value,\n      ])\n    )\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport { type ExpParticle } from \"@dlightjs/reactivity-parser\"\nimport ElementGenerator from \"../HelperGenerators/ElementGenerator\"\nimport { DLError } from \"../error\"\n\nexport default class ExpGenerator extends ElementGenerator {\n  run() {\n    let { content, props } = this.viewParticle as ExpParticle\n    content = this.alterPropView(content)!\n    props = this.alterPropViews(props)\n\n    const dlNodeName = this.generateNodeName()\n\n    this.addInitStatement(this.declareExpNode(dlNodeName, content.value))\n\n    if (content.dependencyIndexArr && content.dependencyIndexArr.length > 0) {\n      this.addUpdateStatements(\n        content.dependencyIndexArr,\n        this.updateExpNode(dlNodeName)\n      )\n    }\n\n    if (props) {\n      Object.entries(props).forEach(([key, { value, dependencyIndexArr }]) => {\n        const statement = this.setExpProp(dlNodeName, key, value)\n        if (statement) {\n          this.addInitStatement(statement)\n          dependencyIndexArr = [\n            ...(dependencyIndexArr ?? []),\n            ...(content.dependencyIndexArr ?? []),\n          ]\n          if (dependencyIndexArr.length > 0) {\n            this.addUpdateStatements(dependencyIndexArr, statement)\n          }\n        }\n      })\n    }\n\n    return dlNodeName\n  }\n\n  /**\n   * @brief Expression node only supports `element` and `do` props\n   * @param dlNodeName\n   * @param key\n   * @param value\n   * @returns\n   */\n  private setExpProp(\n    dlNodeName: string,\n    key: string,\n    value: t.Expression\n  ): t.Statement {\n    if (key === \"element\") return this.setElement(dlNodeName, value, true)\n    if (key === \"do\") return this.addDo(dlNodeName, value)\n\n    return DLError.warn1()\n  }\n\n  /**\n   * @View\n   * const ${dlNodeName} = new ExpNode(() => ${value})\n   */\n  private declareExpNode(dlNodeName: string, value: t.Expression): t.Statement {\n    return this.t.variableDeclaration(\"const\", [\n      this.t.variableDeclarator(\n        this.t.identifier(dlNodeName),\n        this.t.newExpression(this.t.identifier(this.importMap.ExpNode), [\n          this.t.arrowFunctionExpression([], value),\n        ])\n      ),\n    ])\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}.update()\n   */\n  private updateExpNode(dlNodeName: string): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(\n        this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(\"update\")\n        ),\n        []\n      )\n    )\n  }\n}\n","import {\n  type DependencyProp,\n  type SubviewParticle,\n} from \"@dlightjs/reactivity-parser\"\nimport type { types as t } from \"@babel/core\"\nimport PropViewGenerator from \"../HelperGenerators/PropViewGenerator\"\n\nexport default class SubViewGenerator extends PropViewGenerator {\n  run() {\n    let { props } = this.viewParticle as SubviewParticle\n    props = this.alterPropViews(props)\n    const { tag } = this.viewParticle as SubviewParticle\n\n    const dlNodeName = this.generateNodeName()\n\n    this.addInitStatement(this.declareSubviewNode(dlNodeName, tag, props ?? {}))\n\n    const availableProperties = this.subViewPropMap[tag] ?? []\n\n    if (props) {\n      Object.entries(props).forEach(([key, { value, dependencyIndexArr }]) => {\n        if (!dependencyIndexArr || dependencyIndexArr.length === 0) return\n        const depIdx = availableProperties.indexOf(key)\n        const propChange = 1 << depIdx\n        this.addUpdateStatements(\n          dependencyIndexArr,\n          this.updateProp(dlNodeName, propChange, key, value)\n        )\n      })\n    }\n    this.addUpdateStatementsWithoutDep(this.updateSubView(dlNodeName))\n\n    return dlNodeName\n  }\n\n  /**\n   * @View\n   * { ${key}: ${value}, ... }\n   */\n  private genePropNode(props: Record<string, DependencyProp>): t.Expression {\n    return this.t.objectExpression(\n      Object.entries(props).map(([key, prop]) => {\n        return this.t.objectProperty(this.t.identifier(key), prop.value)\n      })\n    )\n  }\n\n  /**\n   * @View\n   * const ${dlNodeName} = this.${tag}({${props}})\n   */\n  private declareSubviewNode(\n    dlNodeName: string,\n    tag: string,\n    props: Record<string, DependencyProp>\n  ): t.VariableDeclaration {\n    return this.t.variableDeclaration(\"const\", [\n      this.t.variableDeclarator(\n        this.t.identifier(dlNodeName),\n        this.t.callExpression(\n          this.t.memberExpression(\n            this.t.thisExpression(),\n            this.t.identifier(tag)\n          ),\n          [this.genePropNode(props)]\n        )\n      ),\n    ])\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}.updateProp(${propChanged}, { ${key}: ${value} })\n   */\n  private updateProp(\n    dlNodeName: string,\n    propChanged: number,\n    key: string,\n    value: t.Expression\n  ): t.Statement {\n    return this.t.expressionStatement(\n      this.t.optionalCallExpression(\n        this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(\"updateProp\")\n        ),\n        [\n          this.t.numericLiteral(propChanged),\n          this.t.objectExpression([\n            this.t.objectProperty(this.t.identifier(key), value),\n          ]),\n        ],\n        true\n      )\n    )\n  }\n\n  /**\n   * @View\n   * ${dlNodeName}?.update(changed)\n   */\n  private updateSubView(dlNodeName: string): t.Statement {\n    return this.t.expressionStatement(\n      this.t.optionalCallExpression(\n        this.t.memberExpression(\n          this.t.identifier(dlNodeName),\n          this.t.identifier(\"update\")\n        ),\n        [this.t.identifier(\"changed\")],\n        true\n      )\n    )\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport { SwitchBranch, SwitchParticle } from \"@dlightjs/reactivity-parser\"\nimport CondGenerator from \"../HelperGenerators/CondGenerator\"\n\nexport default class SwitchGenerator extends CondGenerator {\n  run() {\n    const { branches, discriminant } = this.viewParticle as SwitchParticle\n\n    const deps = branches.flatMap(\n      ({ case: _case }) => _case?.dependencyIndexArr ?? []\n    )\n    deps.push(...(discriminant.dependencyIndexArr ?? []))\n    // ---- declareSwitchNode\n    const dlNodeName = this.generateNodeName()\n    this.addInitStatement(\n      this.declareSwitchNode(dlNodeName, discriminant.value, branches, deps)\n    )\n\n    this.addUpdateStatements(deps, this.updateCondNodeCond(dlNodeName))\n    this.addUpdateStatementsWithoutDep(this.updateCondNode(dlNodeName))\n\n    return dlNodeName\n  }\n\n  /**\n   * @View\n   * _$updates.push((changed) => { ${updateStatements} })\n   */\n  private geneUpdateFunc(\n    updateStatements: Record<number, t.Statement[]>\n  ): t.ExpressionStatement {\n    return this.t.expressionStatement(\n      this.t.callExpression(\n        this.t.memberExpression(\n          this.t.identifier(\"_$updates\"),\n          this.t.identifier(\"push\")\n        ),\n        [\n          this.t.arrowFunctionExpression(\n            [this.t.identifier(\"changed\")],\n            this.geneUpdateBody(updateStatements)\n          ),\n        ]\n      )\n    )\n  }\n\n  /**\n   * @View\n   * _$nodes.push(${nodeNames})\n   */\n  private addNodes(nodeNames: string[]): t.Statement {\n    return this.t.expressionStatement(\n      this.t.callExpression(\n        this.t.memberExpression(\n          this.t.identifier(\"_$nodes\"),\n          this.t.identifier(\"push\")\n        ),\n        nodeNames.map(nodeName => this.t.identifier(nodeName))\n      )\n    )\n  }\n\n  /**\n   * @View\n   * if (_$notSetCond) {\n   *  $thisCond.cond = ${idx}\n   *  _$notSetCond = false\n   * }\n   */\n  private geneCaseIdx(idx: number): t.IfStatement {\n    return this.t.ifStatement(\n      this.t.identifier(\"_$notSetCond\"),\n      this.t.blockStatement([\n        this.geneCondIdx(idx),\n        this.t.expressionStatement(\n          this.t.assignmentExpression(\n            \"=\",\n            this.t.identifier(\"_$notSetCond\"),\n            this.t.booleanLiteral(false)\n          )\n        ),\n      ])\n    )\n  }\n\n  /**\n   * @View\n   * const _$nodes = []\n   * const _$updates = []\n   * let _$notSetCond = true\n   */\n  private declareSwitchVariables(needToUpdate: boolean): t.Statement[] {\n    return [\n      this.t.variableDeclaration(\"const\", [\n        this.t.variableDeclarator(\n          this.t.identifier(\"_$nodes\"),\n          this.t.arrayExpression([])\n        ),\n      ]),\n      ...(needToUpdate\n        ? [\n            this.t.variableDeclaration(\"const\", [\n              this.t.variableDeclarator(\n                this.t.identifier(\"_$updates\"),\n                this.t.arrayExpression([])\n              ),\n            ]),\n          ]\n        : []),\n      this.t.variableDeclaration(\"let\", [\n        this.t.variableDeclarator(\n          this.t.identifier(\"_$notSetCond\"),\n          this.t.booleanLiteral(true)\n        ),\n      ]),\n    ]\n  }\n\n  /**\n   * @View\n   *  _$nodes[0]._$updateFunc = (changed) => {\n   *    _$updates.forEach(update => update(changed))\n   *  })\n   */\n  private addUpdateToTheFirstNode(): t.Statement {\n    return this.t.expressionStatement(\n      this.t.assignmentExpression(\n        \"=\",\n        this.t.memberExpression(\n          this.t.memberExpression(\n            this.t.identifier(\"_$nodes\"),\n            this.t.numericLiteral(0),\n            true\n          ),\n          this.t.identifier(\"_$updateFunc\")\n        ),\n        this.t.arrowFunctionExpression(\n          [this.t.identifier(\"changed\")],\n          this.t.blockStatement([\n            this.t.expressionStatement(\n              this.t.callExpression(\n                this.t.memberExpression(\n                  this.t.identifier(\"_$updates\"),\n                  this.t.identifier(\"forEach\")\n                ),\n                [\n                  this.t.arrowFunctionExpression(\n                    [this.t.identifier(\"update\")],\n                    this.t.blockStatement([\n                      this.t.expressionStatement(\n                        this.t.callExpression(this.t.identifier(\"update\"), [\n                          this.t.identifier(\"changed\"),\n                        ])\n                      ),\n                    ])\n                  ),\n                ]\n              )\n            ),\n          ])\n        )\n      )\n    )\n  }\n\n  /**\n   * @View\n   * const ${dlNodeName} = new CondNode(($thisCond) => {\n   *   const _$nodes = []\n   *   const _$updates = []\n   *   let _$notSetCond = false\n   *   switch ($discriminant) {\n   *    case ${case0}:\n   *      if ($thisCond.case === 0) return\n   *    case ${case1}:\n   *      if ($thisCond.case === 1) return\n   *      return [...${case1Nodes}]\n   *    default:\n   *      if ($thisCond.case === 2) return\n   *  }\n   *   _$nodes[0]._$updateFunc = (changed) => {\n   *    _$updates.forEach(update => update(changed))\n   *  })\n   *   return _$nodes\n   * })\n   */\n  private declareSwitchNode(\n    dlNodeName: string,\n    discriminant: t.Expression,\n    branches: SwitchBranch[],\n    deps: number[]\n  ): t.Statement {\n    let needToUpdate = false\n    const switchStatements = branches.map(\n      ({ case: _case, break: _break, children }, idx) => {\n        // ---- Generate case statements\n        const [childStatements, topLevelNodes, updateStatements] =\n          this.generateChildren(children, false)\n\n        // ---- Check did case change\n        childStatements.unshift(this.geneCondCheck(idx))\n\n        // ---- Add update statements\n        if (Object.keys(updateStatements).length > 0) {\n          childStatements.push(this.geneUpdateFunc(updateStatements))\n          needToUpdate = true\n        }\n\n        // ---- Add nodes\n        childStatements.push(this.addNodes(topLevelNodes))\n\n        // ---- Add set case\n        childStatements.push(this.geneCaseIdx(idx))\n\n        // ---- Add break\n        if (_break) childStatements.push(this.t.breakStatement())\n\n        return this.t.switchCase(_case ? _case.value : null, childStatements)\n      }\n    )\n\n    return this.declareCondNode(\n      dlNodeName,\n      this.t.blockStatement([\n        ...this.declareSwitchVariables(needToUpdate),\n        this.t.switchStatement(discriminant, switchStatements),\n        ...(needToUpdate ? [this.addUpdateToTheFirstNode()] : []),\n        this.t.returnStatement(this.t.identifier(\"_$nodes\")),\n      ]),\n      deps\n    )\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport { type ViewParticle } from \"@dlightjs/reactivity-parser\"\nimport { type ViewGeneratorConfig } from \"./types\"\nimport type BaseGenerator from \"./HelperGenerators/BaseGenerator\"\nimport CompGenerator from \"./NodeGenerators/CompGenerator\"\nimport HTMLGenerator from \"./NodeGenerators/HTMLGenerator\"\nimport TemplateGenerator from \"./NodeGenerators/TemplateGenerator\"\nimport ForGenerator from \"./NodeGenerators/ForGenerator\"\nimport IfGenerator from \"./NodeGenerators/IfGenerator\"\nimport EnvGenerator from \"./NodeGenerators/EnvGenerator\"\nimport TextGenerator from \"./NodeGenerators/TextGenerator\"\nimport ExpGenerator from \"./NodeGenerators/ExpGenerator\"\nimport SubViewGenerator from \"./NodeGenerators/SubViewGenerator\"\nimport SwitchGenerator from \"./NodeGenerators/SwitchGenerator\"\n\nexport default class ViewGenerator {\n  config: ViewGeneratorConfig\n  t: typeof t\n\n  /**\n   * @brief Construct the view generator from config\n   * @param config\n   */\n  constructor(config: ViewGeneratorConfig) {\n    this.config = config\n    this.t = config.babelApi.types\n    this.templateIdx = config.templateIdx\n  }\n\n  /**\n   * @brief Different generator classes for different view particle types\n   */\n  static generatorMap: Record<string, typeof BaseGenerator> = {\n    comp: CompGenerator,\n    html: HTMLGenerator,\n    template: TemplateGenerator,\n    for: ForGenerator,\n    if: IfGenerator,\n    switch: SwitchGenerator,\n    env: EnvGenerator,\n    text: TextGenerator,\n    exp: ExpGenerator,\n    subview: SubViewGenerator,\n  }\n\n  /**\n   * @brief Generate the view given the view particles, mainly used for child particles parsing\n   * @param viewParticles\n   * @returns [initStatements, updateStatements, classProperties, topLevelNodes]\n   */\n  generateChildren(\n    viewParticles: ViewParticle[]\n  ): [\n    t.Statement[],\n    Record<number, t.Statement[]>,\n    t.ClassProperty[],\n    string[],\n  ] {\n    const allInitStatements: t.Statement[] = []\n    const allClassProperties: t.ClassProperty[] = []\n    const allUpdateStatements: Record<number, t.Statement[]> = {}\n    const topLevelNodes: string[] = []\n\n    viewParticles.forEach(viewParticle => {\n      const [initStatements, updateStatements, classProperties, nodeName] =\n        this.generateChild(viewParticle)\n      allInitStatements.push(...initStatements)\n      Object.entries(updateStatements).forEach(([depNum, statements]) => {\n        if (!allUpdateStatements[Number(depNum)]) {\n          allUpdateStatements[Number(depNum)] = []\n        }\n        allUpdateStatements[Number(depNum)].push(...statements)\n      })\n      allClassProperties.push(...classProperties)\n      topLevelNodes.push(nodeName)\n    })\n\n    return [\n      allInitStatements,\n      allUpdateStatements,\n      allClassProperties,\n      topLevelNodes,\n    ]\n  }\n\n  nodeIdx = -1\n  templateIdx = -1\n  /**\n   * @brief Generate the view given the view particle, using generator from the map\n   * @param viewParticle\n   * @returns\n   */\n  generateChild(viewParticle: ViewParticle) {\n    const { type } = viewParticle\n    const GeneratorClass = ViewGenerator.generatorMap[type]\n    if (!GeneratorClass) {\n      throw new Error(`Unknown view particle type: ${type}`)\n    }\n    const generator = new GeneratorClass(viewParticle, this.config)\n    generator.nodeIdx = this.nodeIdx\n    generator.templateIdx = this.templateIdx\n    const result = generator.generate()\n    this.nodeIdx = generator.nodeIdx\n    this.templateIdx = generator.templateIdx\n    return result\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport { type ViewParticle } from \"@dlightjs/reactivity-parser\"\nimport ViewGenerator from \"./ViewGenerator\"\n\nexport default class MainViewGenerator extends ViewGenerator {\n  /**\n   * @brief Generate the main view, i.e., View() { ... }\n   * @param viewParticles\n   * @returns [viewBody, classProperties, templateIdx]\n   */\n  generate(\n    viewParticles: ViewParticle[]\n  ): [t.BlockStatement, t.ClassProperty[], number] {\n    const allClassProperties: t.ClassProperty[] = []\n    const allInitStatements: t.Statement[] = []\n    const allUpdateStatements: Record<number, t.Statement[]> = {}\n    const topLevelNodes: string[] = []\n\n    viewParticles.forEach(viewParticle => {\n      const [initStatements, updateStatements, classProperties, nodeName] =\n        this.generateChild(viewParticle)\n      allInitStatements.push(...initStatements)\n      Object.entries(updateStatements).forEach(([depNum, statements]) => {\n        if (!allUpdateStatements[Number(depNum)]) {\n          allUpdateStatements[Number(depNum)] = []\n        }\n        allUpdateStatements[Number(depNum)].push(...statements)\n      })\n      allClassProperties.push(...classProperties)\n      topLevelNodes.push(nodeName)\n    })\n\n    const viewBody = this.t.blockStatement([\n      ...allInitStatements,\n      ...this.geneUpdate(allUpdateStatements),\n      this.geneReturn(topLevelNodes),\n    ])\n\n    return [viewBody, allClassProperties, this.templateIdx]\n  }\n\n  /**\n   * @View\n   * this._$update = (changed) => {\n   *  if (changed & 1) {\n   *    ...\n   *  }\n   *  ...\n   * }\n   */\n  private geneUpdate(\n    updateStatements: Record<number, t.Statement[]>\n  ): t.Statement[] {\n    if (Object.keys(updateStatements).length === 0) return []\n    return [\n      this.t.expressionStatement(\n        this.t.assignmentExpression(\n          \"=\",\n          this.t.memberExpression(\n            this.t.thisExpression(),\n            this.t.identifier(\"_$update\"),\n            false\n          ),\n          this.t.arrowFunctionExpression(\n            [this.t.identifier(\"changed\")],\n            this.t.blockStatement([\n              ...Object.entries(updateStatements)\n                .filter(([depNum]) => depNum !== \"0\")\n                .map(([depNum, statements]) => {\n                  return this.t.ifStatement(\n                    this.t.binaryExpression(\n                      \"&\",\n                      this.t.identifier(\"changed\"),\n                      this.t.numericLiteral(Number(depNum))\n                    ),\n                    this.t.blockStatement(statements)\n                  )\n                }),\n              ...(updateStatements[0] ?? []),\n            ])\n          )\n        )\n      ),\n    ]\n  }\n\n  /**\n   * @View\n   * return [${nodeNames}]\n   */\n  private geneReturn(topLevelNodes: string[]) {\n    return this.t.returnStatement(\n      this.t.arrayExpression(\n        topLevelNodes.map(nodeName => this.t.identifier(nodeName))\n      )\n    )\n  }\n}\n","import { type types as t } from \"@babel/core\"\nimport { type ViewParticle } from \"@dlightjs/reactivity-parser\"\nimport ViewGenerator from \"./ViewGenerator\"\n\nexport default class SubViewGenerator extends ViewGenerator {\n  /**\n   * @brief Generate the subview, i.e., @View MySubView({ prop1, prop2 }) { ... }\n   *  This is different from the main view in that it has a props node\n   *  and is needed to parse twice,\n   *    1. for this.deps (viewParticlesWithPropertyDep)\n   *    2. for props that passed in this subview (viewParticlesWithIdentityDep)\n   * @param viewParticlesWithPropertyDep\n   * @param viewParticlesWithIdentityDep\n   * @param propsNode\n   * @returns [viewBody, classProperties, templateIdx]\n   */\n  generate(\n    viewParticlesWithPropertyDep: ViewParticle[],\n    viewParticlesWithIdentityDep: ViewParticle[],\n    propsNode: t.ObjectPattern\n  ): [t.BlockStatement, t.ClassProperty[], number] {\n    const allClassProperties: t.ClassProperty[] = []\n    const allInitStatements: t.Statement[] = []\n    const propertyUpdateStatements: Record<number, t.Statement[]> = {}\n    const identifierUpdateStatements: Record<number, t.Statement[]> = {}\n    const topLevelNodes: string[] = []\n\n    const templateIdx = this.templateIdx\n    viewParticlesWithPropertyDep.forEach(viewParticle => {\n      const [initStatements, updateStatements, classProperties, nodeName] =\n        this.generateChild(viewParticle)\n      allInitStatements.push(...initStatements)\n      Object.entries(updateStatements).forEach(([depNum, statements]) => {\n        if (!propertyUpdateStatements[Number(depNum)]) {\n          propertyUpdateStatements[Number(depNum)] = []\n        }\n        propertyUpdateStatements[Number(depNum)].push(...statements)\n      })\n      allClassProperties.push(...classProperties)\n      topLevelNodes.push(nodeName)\n    })\n    // ---- Recover the templateIdx and reinitialize the nodeIdx\n    this.templateIdx = templateIdx\n    this.nodeIdx = -1\n    viewParticlesWithIdentityDep.forEach(viewParticle => {\n      // ---- We only need the update statements for the second props parsing\n      //      because all the init statements are already generated\n      //      a little bit time consuming but otherwise we need to write two different generators\n      const [, updateStatements] = this.generateChild(viewParticle)\n\n      Object.entries(updateStatements).forEach(([depNum, statements]) => {\n        if (!identifierUpdateStatements[Number(depNum)]) {\n          identifierUpdateStatements[Number(depNum)] = []\n        }\n        identifierUpdateStatements[Number(depNum)].push(...statements)\n      })\n    })\n\n    const viewBody = this.t.blockStatement([\n      ...allInitStatements,\n      this.geneReturn(\n        topLevelNodes,\n        propertyUpdateStatements,\n        identifierUpdateStatements,\n        propsNode\n      ),\n    ])\n\n    return [viewBody, allClassProperties, this.templateIdx]\n  }\n\n  /**\n   * @View\n   * (changed) => {\n   *  if (changed & 1) {\n   *    ...\n   *  }\n   *  ...\n   * }\n   */\n  private geneUpdateBody(\n    updateStatements: Record<number, t.Statement[]>,\n    propsNode?: t.ObjectPattern\n  ): t.ArrowFunctionExpression {\n    // ---- Args\n    const args: t.Identifier[] = [this.t.identifier(\"changed\")]\n    if (propsNode) {\n      args.push(this.t.identifier(\"$subviewProps\"))\n    }\n\n    // ---- If update\n    if (propsNode) {\n      /**\n       * ${prop} = $subviewProps\n       */\n      propsNode.properties\n        .filter(prop => this.t.isObjectProperty(prop))\n        .forEach((prop, idx) => {\n          const depNum = 1 << idx\n          if (!updateStatements[depNum]) updateStatements[depNum] = []\n          updateStatements[depNum].unshift(\n            this.t.expressionStatement(\n              this.t.assignmentExpression(\n                \"=\",\n                this.t.objectPattern([prop]),\n                this.t.identifier(\"$subviewProps\")\n              )\n            )\n          )\n        })\n    }\n    // ---- End\n    const runAllStatements = propsNode ? [] : updateStatements[0] ?? []\n    // console.log(propsNode, )\n    return this.t.arrowFunctionExpression(\n      args,\n      this.t.blockStatement([\n        ...Object.entries(updateStatements)\n          .filter(([depNum]) => depNum !== \"0\")\n          .map(([depNum, statements]) => {\n            return this.t.ifStatement(\n              this.t.binaryExpression(\n                \"&\",\n                this.t.identifier(\"changed\"),\n                this.t.numericLiteral(Number(depNum))\n              ),\n              this.t.blockStatement(statements)\n            )\n          }),\n        ...runAllStatements,\n      ])\n    )\n  }\n\n  /**\n   * @View\n   * return {\n   *  _$dlNodeType: 5,\n   *  update: ${this.geneUpdateBody(propertyUpdateStatements)},\n   *  updateProp: ${this.geneUpdateBody(identifierUpdateStatements)},\n   *  nodes: [${topLevelNodes}]\n   * }\n   */\n  private geneReturn(\n    topLevelNodes: string[],\n    propertyUpdateStatements: Record<number, t.Statement[]>,\n    identifierUpdateStatements: Record<number, t.Statement[]>,\n    propsNode: t.ObjectPattern\n  ) {\n    const propertyUpdate =\n      Object.keys(propertyUpdateStatements).length > 0\n        ? [\n            this.t.objectProperty(\n              this.t.identifier(\"update\"),\n              this.geneUpdateBody(propertyUpdateStatements)\n            ),\n          ]\n        : []\n\n    const identifierUpdate =\n      Object.keys(identifierUpdateStatements).filter(n => n !== \"0\").length > 0\n        ? [\n            this.t.objectProperty(\n              this.t.identifier(\"updateProp\"),\n              this.geneUpdateBody(identifierUpdateStatements, propsNode)\n            ),\n          ]\n        : []\n\n    return this.t.returnStatement(\n      this.t.objectExpression([\n        this.t.objectProperty(\n          this.t.identifier(\"_$dlNodeType\"),\n          this.t.numericLiteral(5)\n        ),\n        ...propertyUpdate,\n        ...identifierUpdate,\n        this.t.objectProperty(\n          this.t.identifier(\"_$nodes\"),\n          this.t.arrayExpression(\n            topLevelNodes.map(nodeName => this.t.identifier(nodeName))\n          )\n        ),\n      ])\n    )\n  }\n}\n","import { type ViewParticle } from \"@dlightjs/reactivity-parser\"\nimport { type ViewGeneratorConfig } from \"./types\"\nimport { type types as t } from \"@babel/core\"\nimport MainViewGenerator from \"./MainViewGenerator\"\nimport SubViewGenerator from \"./SubViewGenerator\"\n\nexport function generateView(\n  viewParticles: ViewParticle[],\n  config: ViewGeneratorConfig\n): [t.BlockStatement, t.ClassProperty[], number] {\n  return new MainViewGenerator(config).generate(viewParticles)\n}\n\nexport function generateSubView(\n  viewParticlesWithPropertyDep: ViewParticle[],\n  viewParticlesWithIdentityDep: ViewParticle[],\n  propNode: t.ObjectPattern,\n  config: ViewGeneratorConfig\n): [t.BlockStatement, t.ClassProperty[], number] {\n  return new SubViewGenerator(config).generate(\n    viewParticlesWithPropertyDep,\n    viewParticlesWithIdentityDep,\n    propNode\n  )\n}\n\nexport type * from \"./types\"\n"],"mappings":"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","names":["statements","SubViewGenerator","SubViewGenerator"]}
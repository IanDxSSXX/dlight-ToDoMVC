import Babel, { types } from '@babel/core';

interface ViewProp {
    value: types.Expression;
    viewPropMap?: Record<string, ViewUnit[]>;
}
interface TextUnit {
    type: "text";
    content: types.Expression;
}
interface HTMLUnit {
    type: "html";
    tag: types.Expression;
    content?: ViewProp;
    props?: Record<string, ViewProp>;
    children?: ViewUnit[];
}
interface CompUnit {
    type: "comp";
    tag: types.Expression;
    content?: ViewProp;
    props?: Record<string, ViewProp>;
    children?: ViewUnit[];
}
interface ForUnit {
    type: "for";
    item: types.LVal;
    array: types.Expression;
    key?: types.Expression;
    children: ViewUnit[];
}
interface IfBranch {
    condition: types.Expression;
    children: ViewUnit[];
}
interface IfUnit {
    type: "if";
    branches: IfBranch[];
}
interface SwitchBranch {
    case: types.Expression | null | undefined;
    children: ViewUnit[];
    break: boolean;
}
interface SwitchUnit {
    type: "switch";
    discriminant: types.Expression;
    branches: SwitchBranch[];
}
interface EnvUnit {
    type: "env";
    props: Record<string, ViewProp>;
    children: ViewUnit[];
}
interface ExpUnit {
    type: "exp";
    content: ViewProp;
    props?: Record<string, ViewProp>;
}
interface SubviewUnit {
    type: "subview";
    tag: string;
    props?: Record<string, ViewProp>;
    children?: ViewUnit[];
}
type ViewUnit = TextUnit | HTMLUnit | CompUnit | IfUnit | ForUnit | EnvUnit | ExpUnit | SubviewUnit | SwitchUnit;
interface ViewParserConfig {
    babelApi: typeof Babel;
    subviewNames: string[];
    htmlTags: string[];
}
interface ViewParserOption {
    compWrapper?: string;
    htmlTagWrapper?: string;
    environmentTagName?: string;
    expressionTagName?: string;
}

/**
 * @brief Generate view units from a babel ast
 * @param statement
 * @param config
 * @param options
 * @returns ViewUnit[]
 */
declare function parseView(statement: types.BlockStatement, config: ViewParserConfig, options?: ViewParserOption): ViewUnit[];

export { CompUnit, EnvUnit, ExpUnit, ForUnit, HTMLUnit, IfBranch, IfUnit, SubviewUnit, SwitchBranch, SwitchUnit, TextUnit, ViewParserConfig, ViewParserOption, ViewProp, ViewUnit, parseView };

{"version":3,"sources":["../src/index.ts"],"sourcesContent":["type DLightErrMap = Record<number, string>\ntype ErrorMethod<T extends DLightErrMap, G extends string> = {\n  [K in keyof T as `${G}${K & number}`]: (...args: string[]) => any\n}\n\n/**\n * @brief Create error handler by given error space and error maps\n *  e.g.\n *  const errHandler = createErrorHandler(\"DLight\", {\n *    1: \"Cannot find node type: $0, throw\"\n *  }, {\n *    1: \"This is an error: $0\"\n *  }, {\n *    1: \"It's a warning\"\n *  })\n * errHandler.throw1(\"div\") // -> throw new Error(\":D - DLight[throw1]: Cannot find node type: div, throw\")\n * errHandler.error1(\"div\") // -> console.error(\":D - DLight[error1]: This is an error: div\")\n * errHandler.warn1() // -> console.warn(\":D - DLight[warn1]: It's a warning\")\n * @param errorSpace\n * @param throwMap\n * @param errorMap\n * @param warningMap\n * @returns Error handler\n */\nexport function createErrorHandler<\n  A extends DLightErrMap,\n  B extends DLightErrMap,\n  C extends DLightErrMap,\n>(\n  errorSpace: string,\n  throwMap: A = {} as any,\n  errorMap: B = {} as any,\n  warningMap: C = {} as any\n) {\n  function handleError(\n    map: DLightErrMap,\n    type: string,\n    func: (msg: string) => any\n  ) {\n    return Object.fromEntries(\n      Object.entries(map).map(([code, msg]) => [\n        `${type}${code}`,\n        (...args: string[]) => {\n          args.forEach((arg, i) => {\n            msg = msg.replace(`$${i}`, arg)\n          })\n          return func(`:D - ${errorSpace}[${type}${code}]: ${msg}`)\n        },\n      ])\n    )\n  }\n  const methods: ErrorMethod<A, \"throw\"> &\n    ErrorMethod<B, \"error\"> &\n    ErrorMethod<C, \"warn\"> = {\n    ...handleError(throwMap, \"throw\", msg => {\n      throw new Error(msg)\n    }),\n    ...handleError(errorMap, \"error\", console.error),\n    ...handleError(warningMap, \"warn\", console.warn),\n  } as any\n\n  function notDescribed(type: string) {\n    return () => `:D ${errorSpace}: ${type} not described`\n  }\n\n  return {\n    ...methods,\n    throwUnknown: notDescribed(\"throw\"),\n    errorUnknown: notDescribed(\"error\"),\n    warnUnknown: notDescribed(\"warn\"),\n  }\n}\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,wBAAAE,IAAA,eAAAC,EAAAH,GAwBO,SAASE,EAKdE,EACAC,EAAc,CAAC,EACfC,EAAc,CAAC,EACfC,EAAgB,CAAC,EACjB,CACA,SAASC,EACPC,EACAC,EACAC,EACA,CACA,OAAO,OAAO,YACZ,OAAO,QAAQF,CAAG,EAAE,IAAI,CAAC,CAACG,EAAMC,CAAG,IAAM,CACvC,GAAGH,IAAOE,IACV,IAAIE,KACFA,EAAK,QAAQ,CAACC,EAAKC,IAAM,CACvBH,EAAMA,EAAI,QAAQ,IAAIG,IAAKD,CAAG,CAChC,CAAC,EACMJ,EAAK,QAAQP,KAAcM,IAAOE,OAAUC,GAAK,EAE5D,CAAC,CACH,CACF,CACA,IAAMI,EAEqB,CACzB,GAAGT,EAAYH,EAAU,QAASQ,GAAO,CACvC,MAAM,IAAI,MAAMA,CAAG,CACrB,CAAC,EACD,GAAGL,EAAYF,EAAU,QAAS,QAAQ,KAAK,EAC/C,GAAGE,EAAYD,EAAY,OAAQ,QAAQ,IAAI,CACjD,EAEA,SAASW,EAAaR,EAAc,CAClC,MAAO,IAAM,MAAMN,MAAeM,iBACpC,CAEA,MAAO,CACL,GAAGO,EACH,aAAcC,EAAa,OAAO,EAClC,aAAcA,EAAa,OAAO,EAClC,YAAaA,EAAa,MAAM,CAClC,CACF","names":["src_exports","__export","createErrorHandler","__toCommonJS","errorSpace","throwMap","errorMap","warningMap","handleError","map","type","func","code","msg","args","arg","i","methods","notDescribed"]}
import { CompNode, ExpNode } from '@dlightjs/dlight';
import { Properties } from 'csstype';

interface DLightGlobalEventHandlers {
    /**
     * Fires when the user aborts the download.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/abort_event)
     */
    onAbort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationcancel_event) */
    onAnimationCancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event) */
    onAnimationEnd: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event) */
    onAnimationIteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event) */
    onAnimationStart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/auxclick_event) */
    onAuxClick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/beforeinput_event) */
    onBeforeInput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
    /**
     * Fires when the object loses the input focus.
     * @param ev The focus event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/blur_event)
     */
    onBlur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/cancel_event) */
    onCancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when playback is possible, but would require further buffering.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplay_event)
     */
    onCanPlay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplaythrough_event) */
    onCanPlayThrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Fires when the contents of the object or selection have changed.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/change_event)
     */
    onChange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Fires when the user clicks the left mouse button on the object
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/click_event)
     */
    onClick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close_event) */
    onClose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Fires when the user clicks the right mouse button in the client area, opening the context menu.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/contextmenu_event)
     */
    onContextMenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/copy_event) */
    onCopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/cuechange_event) */
    onCueChange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/cut_event) */
    onCut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
    /**
     * Fires when the user double-clicks the object.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/dblclick_event)
     */
    onDblClick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * Fires on the source object continuously during a drag operation.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drag_event)
     */
    onDrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * Fires on the source object when the user releases the mouse at the close of a drag operation.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragend_event)
     */
    onDragEnd: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * Fires on the target element when the user drags the object to a valid drop target.
     * @param ev The drag event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragenter_event)
     */
    onDragEnter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
     * @param ev The drag event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragleave_event)
     */
    onDragLeave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * Fires on the target element continuously while the user drags the object over a valid drop target.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragover_event)
     */
    onDragOver: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * Fires on the source object when the user starts to drag a text selection or selected object.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragstart_event)
     */
    onDragStart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drop_event) */
    onDrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * Occurs when the duration attribute is updated.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/durationchange_event)
     */
    onDurationChange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when the media element is reset to its initial state.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/emptied_event)
     */
    onEmptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when the end of playback is reached.
     * @param ev The event
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended_event)
     */
    onEnded: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Fires when an error occurs during object loading.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/error_event)
     */
    onError: OnErrorEventHandler;
    /**
     * Fires when the object receives focus.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/focus_event)
     */
    onFocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/formdata_event) */
    onFormData: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/gotpointercapture_event) */
    onGotPointerCapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/input_event) */
    onInput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/invalid_event) */
    onInvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Fires when the user presses a key.
     * @param ev The keyboard event
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keydown_event)
     */
    onKeyDown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
    /**
     * Fires when the user presses an alphanumeric key.
     * @param ev The event.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keypress_event)
     */
    onKeyPress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
    /**
     * Fires when the user releases a key.
     * @param ev The keyboard event
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keyup_event)
     */
    onKeyUp: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
    /**
     * Fires immediately after the browser loads the object.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement/load_event)
     */
    onLoad: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when media data is loaded at the current playback position.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadeddata_event)
     */
    onLoadedData: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when the duration and dimensions of the media have been determined.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadedmetadata_event)
     */
    onLoadedMetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when Internet Explorer begins looking for media data.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadstart_event)
     */
    onLoadStart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/lostpointercapture_event) */
    onLostPointerCapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * Fires when the user clicks the object with either mouse button.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousedown_event)
     */
    onMouseDown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseenter_event) */
    onMouseEnter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseleave_event) */
    onMouseLeave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * Fires when the user moves the mouse over the object.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousemove_event)
     */
    onMouseMove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * Fires when the user moves the mouse pointer outside the boundaries of the object.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseout_event)
     */
    onMouseOut: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * Fires when the user moves the mouse pointer into the object.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseover_event)
     */
    onMouseOver: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * Fires when the user releases a mouse button while the mouse is over the object.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseup_event)
     */
    onMouseUp: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/paste_event) */
    onPaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
    /**
     * Occurs when playback is paused.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause_event)
     */
    onPause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when the play method is requested.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play_event)
     */
    onPlay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when the audio or video has started playing.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playing_event)
     */
    onPlaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointercancel_event) */
    onPointerCancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerdown_event) */
    onPointerDown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerenter_event) */
    onPointerEnter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerleave_event) */
    onPointerLeave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointermove_event) */
    onPointerMove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerout_event) */
    onPointerOut: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerover_event) */
    onPointerOver: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerup_event) */
    onPointerUp: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * Occurs to indicate progress while downloading media data.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/progress_event)
     */
    onProgress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;
    /**
     * Occurs when the playback rate is increased or decreased.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ratechange_event)
     */
    onRateChange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Fires when the user resets a form.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset_event)
     */
    onReset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/resize_event) */
    onResize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
    /**
     * Fires when the user repositions the scroll box in the scroll bar on the object.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scroll_event)
     */
    onScroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollend_event) */
    onScrollEnd: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/securitypolicyviolation_event) */
    onSecurityPolicyViolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
    /**
     * Occurs when the seek operation ends.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeked_event)
     */
    onSeeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when the current playback position is moved.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking_event)
     */
    onSeeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Fires when the current selection changes.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select_event)
     */
    onSelect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/selectionchange_event) */
    onSelectionChange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/selectstart_event) */
    onSelectStart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/slotchange_event) */
    onSlotChange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when the download has stopped.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/stalled_event)
     */
    onStalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit_event) */
    onSubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
    /**
     * Occurs if the load operation has been intentionally halted.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/suspend_event)
     */
    onSuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs to indicate the current playback position.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/timeupdate_event)
     */
    onTimeUpdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/toggle_event) */
    onToggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitioncancel_event) */
    onTransitionCancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event) */
    onTransitionEnd: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionrun_event) */
    onTransitionRun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionstart_event) */
    onTransitionStart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    /**
     * Occurs when the volume is changed, or playback is muted or unmuted.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volumechange_event)
     */
    onVolumeChange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when playback stops because the next frame of a video resource is not available.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waiting_event)
     */
    onWaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * @deprecated This is a legacy alias of `onAnimationEnd`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)
     */
    onWebkitAnimationEnd: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * @deprecated This is a legacy alias of `onAnimationIteration`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)
     */
    onWebkitAnimationIteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * @deprecated This is a legacy alias of `onAnimationStart`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)
     */
    onWebkitAnimationStart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * @deprecated This is a legacy alias of `onTransitionEnd`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)
     */
    onWebkitTransitionEnd: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/wheel_event) */
    onWheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
}

type IfEquals<X, Y, A, B> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;
type WritableKeysOf<T> = {
    [P in keyof T]: IfEquals<{
        [Q in P]: T[P];
    }, {
        -readonly [Q in P]: T[P];
    }, P, never>;
}[keyof T];
type RemoveReadOnly<T> = Pick<T, WritableKeysOf<T>>;
type OmitFunction<T> = Omit<T, {
    [K in keyof T]: T[K] extends (...args: any) => any ? K : never;
}[keyof T]>;
type OmitFuncAndReadOnly<T> = RemoveReadOnly<OmitFunction<T>>;
type OmitFuncAndReadOnlyProperty<G> = Omit<OmitFuncAndReadOnly<G>, "className" | "htmlFor" | "style" | "innerText">;
type HTMLAttributes<T> = OmitFuncAndReadOnlyProperty<T> & {
    style: Properties;
    class: string;
    for: string;
};

type PropertyWithEvent<G> = Omit<G, {
    [K in keyof G]: K extends `on${string}` ? K : never;
}[keyof G]> & DLightGlobalEventHandlers;
interface DLightHtmlProps {
    do: (element: HTMLElement) => void;
    element: HTMLElement | ((holder: HTMLElement) => void) | undefined;
    prop: Record<string, string | number | boolean>;
    attr: Record<string, string>;
    dataset: Record<string, string>;
    forwardProps: true | undefined;
}
type DLightHTMLAttributes<T, G = object> = DLightHtmlProps & HTMLAttributes<T> & G;
type DLightHTMLAttributesFunc<T, G = object> = {
    [K in keyof DLightHTMLAttributes<T, G>]: (value?: DLightHTMLAttributes<T, G>[K]) => Omit<DLightHTMLAttributesFunc<T, G>, K>;
};
type DLightHtmlTagFunc<T = HTMLElement, G = object> = (innerText?: string | number) => DLightHTMLAttributesFunc<PropertyWithEvent<T>, G>;
declare const a: DLightHtmlTagFunc<HTMLAnchorElement>;
declare const abbr: DLightHtmlTagFunc;
declare const address: DLightHtmlTagFunc;
declare const area: DLightHtmlTagFunc<HTMLAreaElement>;
declare const article: DLightHtmlTagFunc;
declare const aside: DLightHtmlTagFunc;
declare const audio: DLightHtmlTagFunc<HTMLAudioElement>;
declare const b: DLightHtmlTagFunc;
declare const base: DLightHtmlTagFunc<HTMLBaseElement>;
declare const bdi: DLightHtmlTagFunc;
declare const bdo: DLightHtmlTagFunc;
declare const blockquote: DLightHtmlTagFunc<HTMLQuoteElement>;
declare const body: DLightHtmlTagFunc<HTMLBodyElement>;
declare const br: DLightHtmlTagFunc<HTMLBRElement>;
declare const button: DLightHtmlTagFunc<HTMLButtonElement>;
declare const canvas: DLightHtmlTagFunc<HTMLCanvasElement>;
declare const caption: DLightHtmlTagFunc<HTMLTableCaptionElement>;
declare const cite: DLightHtmlTagFunc;
declare const code: DLightHtmlTagFunc;
declare const col: DLightHtmlTagFunc<HTMLTableColElement>;
declare const colgroup: DLightHtmlTagFunc<HTMLTableColElement>;
declare const data: DLightHtmlTagFunc<HTMLDataElement>;
declare const datalist: DLightHtmlTagFunc<HTMLDataListElement>;
declare const dd: DLightHtmlTagFunc;
declare const del: DLightHtmlTagFunc<HTMLModElement>;
declare const details: DLightHtmlTagFunc<HTMLDetailsElement>;
declare const dfn: DLightHtmlTagFunc;
declare const dialog: DLightHtmlTagFunc<HTMLDialogElement>;
declare const div: DLightHtmlTagFunc<HTMLDivElement>;
declare const dl: DLightHtmlTagFunc<HTMLDListElement>;
declare const dt: DLightHtmlTagFunc;
declare const em: DLightHtmlTagFunc;
declare const embed: DLightHtmlTagFunc<HTMLEmbedElement>;
declare const fieldset: DLightHtmlTagFunc<HTMLFieldSetElement>;
declare const figcaption: DLightHtmlTagFunc;
declare const figure: DLightHtmlTagFunc;
declare const footer: DLightHtmlTagFunc;
declare const form: DLightHtmlTagFunc<HTMLFormElement>;
declare const h1: DLightHtmlTagFunc<HTMLHeadingElement>;
declare const h2: DLightHtmlTagFunc<HTMLHeadingElement>;
declare const h3: DLightHtmlTagFunc<HTMLHeadingElement>;
declare const h4: DLightHtmlTagFunc<HTMLHeadingElement>;
declare const h5: DLightHtmlTagFunc<HTMLHeadingElement>;
declare const h6: DLightHtmlTagFunc<HTMLHeadingElement>;
declare const head: DLightHtmlTagFunc<HTMLHeadElement>;
declare const header: DLightHtmlTagFunc;
declare const hgroup: DLightHtmlTagFunc;
declare const hr: DLightHtmlTagFunc<HTMLHRElement>;
declare const html: DLightHtmlTagFunc<HTMLHtmlElement>;
declare const i: DLightHtmlTagFunc;
declare const iframe: DLightHtmlTagFunc<HTMLIFrameElement>;
declare const img: DLightHtmlTagFunc<HTMLImageElement>;
declare const input: DLightHtmlTagFunc<HTMLInputElement>;
declare const ins: DLightHtmlTagFunc<HTMLModElement>;
declare const kbd: DLightHtmlTagFunc;
declare const label: DLightHtmlTagFunc<HTMLLabelElement>;
declare const legend: DLightHtmlTagFunc<HTMLLegendElement>;
declare const li: DLightHtmlTagFunc<HTMLLIElement>;
declare const link: DLightHtmlTagFunc<HTMLLinkElement>;
declare const main: DLightHtmlTagFunc;
declare const map: DLightHtmlTagFunc<HTMLMapElement>;
declare const mark: DLightHtmlTagFunc;
declare const menu: DLightHtmlTagFunc<HTMLMenuElement>;
declare const meta: DLightHtmlTagFunc<HTMLMetaElement>;
declare const meter: DLightHtmlTagFunc<HTMLMeterElement>;
declare const nav: DLightHtmlTagFunc;
declare const noscript: DLightHtmlTagFunc;
declare const object: DLightHtmlTagFunc<HTMLObjectElement>;
declare const ol: DLightHtmlTagFunc<HTMLOListElement>;
declare const optgroup: DLightHtmlTagFunc<HTMLOptGroupElement>;
declare const option: DLightHtmlTagFunc<HTMLOptionElement>;
declare const output: DLightHtmlTagFunc<HTMLOutputElement>;
declare const p: DLightHtmlTagFunc<HTMLParagraphElement>;
declare const picture: DLightHtmlTagFunc<HTMLPictureElement>;
declare const pre: DLightHtmlTagFunc<HTMLPreElement>;
declare const progress: DLightHtmlTagFunc<HTMLProgressElement>;
declare const q: DLightHtmlTagFunc<HTMLQuoteElement>;
declare const rp: DLightHtmlTagFunc;
declare const rt: DLightHtmlTagFunc;
declare const ruby: DLightHtmlTagFunc;
declare const s: DLightHtmlTagFunc;
declare const samp: DLightHtmlTagFunc;
declare const script: DLightHtmlTagFunc<HTMLScriptElement>;
declare const section: DLightHtmlTagFunc;
declare const select: DLightHtmlTagFunc<HTMLSelectElement>;
declare const slot: DLightHtmlTagFunc<HTMLSlotElement>;
declare const small: DLightHtmlTagFunc;
declare const source: DLightHtmlTagFunc<HTMLSourceElement>;
declare const span: DLightHtmlTagFunc<HTMLSpanElement>;
declare const strong: DLightHtmlTagFunc;
declare const style: DLightHtmlTagFunc<HTMLStyleElement>;
declare const sub: DLightHtmlTagFunc;
declare const summary: DLightHtmlTagFunc;
declare const sup: DLightHtmlTagFunc;
declare const table: DLightHtmlTagFunc<HTMLTableElement>;
declare const tbody: DLightHtmlTagFunc<HTMLTableSectionElement>;
declare const td: DLightHtmlTagFunc<HTMLTableCellElement>;
declare const template: DLightHtmlTagFunc<HTMLTemplateElement>;
declare const textarea: DLightHtmlTagFunc<HTMLTextAreaElement>;
declare const tfoot: DLightHtmlTagFunc<HTMLTableSectionElement>;
declare const th: DLightHtmlTagFunc<HTMLTableCellElement>;
declare const thead: DLightHtmlTagFunc<HTMLTableSectionElement>;
declare const time: DLightHtmlTagFunc<HTMLTimeElement>;
declare const title: DLightHtmlTagFunc<HTMLTitleElement>;
declare const tr: DLightHtmlTagFunc<HTMLTableRowElement>;
declare const track: DLightHtmlTagFunc<HTMLTrackElement>;
declare const u: DLightHtmlTagFunc;
declare const ul: DLightHtmlTagFunc<HTMLUListElement>;
declare const var_: DLightHtmlTagFunc;
declare const video: DLightHtmlTagFunc<HTMLVideoElement>;
declare const wbr: DLightHtmlTagFunc;
declare const acronym: DLightHtmlTagFunc;
declare const applet: DLightHtmlTagFunc<HTMLUnknownElement>;
declare const basefont: DLightHtmlTagFunc;
declare const bgsound: DLightHtmlTagFunc<HTMLUnknownElement>;
declare const big: DLightHtmlTagFunc;
declare const blink: DLightHtmlTagFunc<HTMLUnknownElement>;
declare const center: DLightHtmlTagFunc;
declare const dir: DLightHtmlTagFunc<HTMLDirectoryElement>;
declare const font: DLightHtmlTagFunc<HTMLFontElement>;
declare const frame: DLightHtmlTagFunc<HTMLFrameElement>;
declare const frameset: DLightHtmlTagFunc<HTMLFrameSetElement>;
declare const isindex: DLightHtmlTagFunc<HTMLUnknownElement>;
declare const keygen: DLightHtmlTagFunc<HTMLUnknownElement>;
declare const listing: DLightHtmlTagFunc<HTMLPreElement>;
declare const marquee: DLightHtmlTagFunc<HTMLMarqueeElement>;
declare const menuitem: DLightHtmlTagFunc;
declare const multicol: DLightHtmlTagFunc<HTMLUnknownElement>;
declare const nextid: DLightHtmlTagFunc<HTMLUnknownElement>;
declare const nobr: DLightHtmlTagFunc;
declare const noembed: DLightHtmlTagFunc;
declare const noframes: DLightHtmlTagFunc;
declare const param: DLightHtmlTagFunc<HTMLParamElement>;
declare const plaintext: DLightHtmlTagFunc;
declare const rb: DLightHtmlTagFunc;
declare const rtc: DLightHtmlTagFunc;
declare const spacer: DLightHtmlTagFunc<HTMLUnknownElement>;
declare const strike: DLightHtmlTagFunc;
declare const tt: DLightHtmlTagFunc;
declare const xmp: DLightHtmlTagFunc<HTMLPreElement>;
declare const animate: DLightHtmlTagFunc<SVGAnimateElement>;
declare const animateMotion: DLightHtmlTagFunc<SVGAnimateMotionElement>;
declare const animateTransform: DLightHtmlTagFunc<SVGAnimateTransformElement>;
declare const circle: DLightHtmlTagFunc<SVGCircleElement>;
declare const clipPath: DLightHtmlTagFunc<SVGClipPathElement>;
declare const defs: DLightHtmlTagFunc<SVGDefsElement>;
declare const desc: DLightHtmlTagFunc<SVGDescElement>;
declare const ellipse: DLightHtmlTagFunc<SVGEllipseElement>;
declare const feBlend: DLightHtmlTagFunc<SVGFEBlendElement>;
declare const feColorMatrix: DLightHtmlTagFunc<SVGFEColorMatrixElement>;
declare const feComponentTransfer: DLightHtmlTagFunc<SVGFEComponentTransferElement>;
declare const feComposite: DLightHtmlTagFunc<SVGFECompositeElement>;
declare const feConvolveMatrix: DLightHtmlTagFunc<SVGFEConvolveMatrixElement>;
declare const feDiffuseLighting: DLightHtmlTagFunc<SVGFEDiffuseLightingElement>;
declare const feDisplacementMap: DLightHtmlTagFunc<SVGFEDisplacementMapElement>;
declare const feDistantLight: DLightHtmlTagFunc<SVGFEDistantLightElement>;
declare const feDropShadow: DLightHtmlTagFunc<SVGFEDropShadowElement>;
declare const feFlood: DLightHtmlTagFunc<SVGFEFloodElement>;
declare const feFuncA: DLightHtmlTagFunc<SVGFEFuncAElement>;
declare const feFuncB: DLightHtmlTagFunc<SVGFEFuncBElement>;
declare const feFuncG: DLightHtmlTagFunc<SVGFEFuncGElement>;
declare const feFuncR: DLightHtmlTagFunc<SVGFEFuncRElement>;
declare const feGaussianBlur: DLightHtmlTagFunc<SVGFEGaussianBlurElement>;
declare const feImage: DLightHtmlTagFunc<SVGFEImageElement>;
declare const feMerge: DLightHtmlTagFunc<SVGFEMergeElement>;
declare const feMergeNode: DLightHtmlTagFunc<SVGFEMergeNodeElement>;
declare const feMorphology: DLightHtmlTagFunc<SVGFEMorphologyElement>;
declare const feOffset: DLightHtmlTagFunc<SVGFEOffsetElement>;
declare const fePointLight: DLightHtmlTagFunc<SVGFEPointLightElement>;
declare const feSpecularLighting: DLightHtmlTagFunc<SVGFESpecularLightingElement>;
declare const feSpotLight: DLightHtmlTagFunc<SVGFESpotLightElement>;
declare const feTile: DLightHtmlTagFunc<SVGFETileElement>;
declare const feTurbulence: DLightHtmlTagFunc<SVGFETurbulenceElement>;
declare const filter: DLightHtmlTagFunc<SVGFilterElement>;
declare const foreignObject: DLightHtmlTagFunc<SVGForeignObjectElement>;
declare const g: DLightHtmlTagFunc<SVGGElement>;
declare const image: DLightHtmlTagFunc<SVGImageElement>;
declare const line: DLightHtmlTagFunc<SVGLineElement>;
declare const linearGradient: DLightHtmlTagFunc<SVGLinearGradientElement>;
declare const marker: DLightHtmlTagFunc<SVGMarkerElement>;
declare const mask: DLightHtmlTagFunc<SVGMaskElement>;
declare const metadata: DLightHtmlTagFunc<SVGMetadataElement>;
declare const mpath: DLightHtmlTagFunc<SVGMPathElement>;
declare const path: DLightHtmlTagFunc<SVGPathElement>;
declare const pattern: DLightHtmlTagFunc<SVGPatternElement>;
declare const polygon: DLightHtmlTagFunc<SVGPolygonElement>;
declare const polyline: DLightHtmlTagFunc<SVGPolylineElement>;
declare const radialGradient: DLightHtmlTagFunc<SVGRadialGradientElement>;
declare const rect: DLightHtmlTagFunc<SVGRectElement>;
declare const set: DLightHtmlTagFunc<SVGSetElement>;
declare const stop: DLightHtmlTagFunc<SVGStopElement>;
declare const svg: DLightHtmlTagFunc<SVGSVGElement>;
declare const switch_: DLightHtmlTagFunc<SVGSwitchElement>;
declare const symbol: DLightHtmlTagFunc<SVGSymbolElement>;
declare const text: DLightHtmlTagFunc<SVGTextElement>;
declare const textPath: DLightHtmlTagFunc<SVGTextPathElement>;
declare const tspan: DLightHtmlTagFunc<SVGTSpanElement>;
declare const use: DLightHtmlTagFunc<SVGUseElement>;
declare const view: DLightHtmlTagFunc<SVGViewElement>;

type Useless = {
    [key in ""]: never;
};
type DLightObject<T> = {
    [K in keyof T]-?: undefined extends T[K] ? (value?: T[K]) => DLightObject<Omit<T, K>> : (value: T[K]) => DLightObject<Omit<T, K>>;
};
interface CustomNodeProps {
    do: (node: CompNode) => void;
    element: HTMLElement[] | ((holder: HTMLElement[]) => void) | undefined;
    forwardProps: true | undefined;
}
type ContentProp<T = object> = T & {
    _$idContent: true;
};
type RemoveOptional<T> = {
    [K in keyof T]-?: T[K];
};
type IsAny<T> = {
    _$isAny: true;
} extends T ? true : false;
type ContentKeyName<T> = {
    [K in keyof T]: IsAny<T[K]> extends true ? never : T[K] extends ContentProp<infer _> ? K : never;
}[keyof T];
type CheckContent<T> = RemoveOptional<T>[ContentKeyName<RemoveOptional<T>>];
type CustomClassTag<T, O> = ContentKeyName<RemoveOptional<O>> extends undefined ? () => DLightObject<T> : undefined extends O[ContentKeyName<RemoveOptional<O>>] ? CheckContent<O> extends ContentProp<infer U> ? (content?: U extends unknown ? any : unknown) => DLightObject<Omit<T, ContentKeyName<RemoveOptional<O>>>> : never : CheckContent<O> extends ContentProp<infer U> ? (content: U extends unknown ? any : unknown) => DLightObject<Omit<T, ContentKeyName<RemoveOptional<O>>>> : never;
type CustomSubViewTag<T> = T extends {
    content: infer U;
} ? (content: U) => DLightObject<Omit<T, "content">> : T extends {
    content?: infer U;
} ? (content?: U) => DLightObject<Omit<T, "content">> : () => DLightObject<T>;
type CustomTagType<T, G> = CustomClassTag<T & CustomNodeProps & (keyof G extends never ? object : DLightHTMLAttributes<G>), T> & Useless;
type Typed<T = object, G = object> = CustomTagType<T, G> & Useless;
type SubTyped<T = object> = CustomSubViewTag<T> & Useless;
type Pretty = any;
type UnTyped<T> = T extends Typed<infer U> ? U : never;

interface ExpressionTag {
    do: (node: ExpNode) => void;
    element: HTMLElement[] | ((holder: HTMLElement[]) => void) | undefined;
}
type ExpressionTagFunc = (nodes: any) => ExpressionTag;
declare const _: ExpressionTagFunc;

type AnyEnv = {
    _$anyEnv: true;
};
declare function env<T = AnyEnv>(): T extends AnyEnv ? any : DLightObject<T>;

declare const comp: <T>(tag: T) => Typed<T extends any ? object : T>;
declare const tag: (tag: any) => DLightHtmlTagFunc;

declare const Static: any;
declare const Children: any;
declare const Content: any;
declare const Prop: any;
declare const Env: any;
declare const Watch: any;
declare const ForwardProps: any;
declare const required: any;

export { Children, Content, ContentProp, DLightHTMLAttributes, DLightHTMLAttributesFunc, DLightHtmlTagFunc, DLightObject, Env, ForwardProps, Pretty, Prop, PropertyWithEvent, RemoveOptional, Static, SubTyped, Typed, UnTyped, Watch, _, a, abbr, acronym, address, animate, animateMotion, animateTransform, applet, area, article, aside, audio, b, base, basefont, bdi, bdo, bgsound, big, blink, blockquote, body, br, button, canvas, caption, center, circle, cite, clipPath, code, col, colgroup, comp, data, datalist, dd, defs, del, desc, details, dfn, dialog, dir, div, dl, dt, ellipse, em, embed, env, feBlend, feColorMatrix, feComponentTransfer, feComposite, feConvolveMatrix, feDiffuseLighting, feDisplacementMap, feDistantLight, feDropShadow, feFlood, feFuncA, feFuncB, feFuncG, feFuncR, feGaussianBlur, feImage, feMerge, feMergeNode, feMorphology, feOffset, fePointLight, feSpecularLighting, feSpotLight, feTile, feTurbulence, fieldset, figcaption, figure, filter, font, footer, foreignObject, form, frame, frameset, g, h1, h2, h3, h4, h5, h6, head, header, hgroup, hr, html, i, iframe, image, img, input, ins, isindex, kbd, keygen, label, legend, li, line, linearGradient, link, listing, main, map, mark, marker, marquee, mask, menu, menuitem, meta, metadata, meter, mpath, multicol, nav, nextid, nobr, noembed, noframes, noscript, object, ol, optgroup, option, output, p, param, path, pattern, picture, plaintext, polygon, polyline, pre, progress, q, radialGradient, rb, rect, required, rp, rt, rtc, ruby, s, samp, script, section, select, set, slot, small, source, spacer, span, stop, strike, strong, style, sub, summary, sup, svg, switch_, symbol, table, tag, tbody, td, template, text, textPath, textarea, tfoot, th, thead, time, title, tr, track, tspan, tt, u, ul, use, var_, video, view, wbr, xmp };

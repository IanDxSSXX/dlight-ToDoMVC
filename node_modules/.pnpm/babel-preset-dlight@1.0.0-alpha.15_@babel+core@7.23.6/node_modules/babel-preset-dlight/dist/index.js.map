{"version":3,"sources":["../src/index.ts","../src/pluginProvider.ts","../src/plugin.ts"],"sourcesContent":["import syntaxTypescript from \"babel-plugin-syntax-typescript-new\"\nimport syntaxDecorators from \"@babel/plugin-syntax-decorators\"\nimport dlight from \"./plugin\"\nimport { type DLightOption } from \"./types\"\nimport { type ConfigAPI, type TransformOptions } from \"@babel/core\"\n\nexport default function (\n  _: ConfigAPI,\n  options: DLightOption\n): TransformOptions {\n  return {\n    plugins: [\n      syntaxTypescript,\n      [syntaxDecorators.default ?? syntaxDecorators, { legacy: true }],\n      [dlight, options],\n    ],\n  }\n}\n\nexport { type DLightOption }\n","import type babel from \"@babel/core\"\nimport { type types as t, type NodePath } from \"@babel/core\"\nimport {\n  type PropertyContainer,\n  type HTMLTags,\n  type SubViewPropSubDepMap,\n} from \"./types\"\nimport { minimatch } from \"minimatch\"\nimport { parseView } from \"@dlightjs/view-parser\"\nimport { parseReactivity } from \"@dlightjs/reactivity-parser\"\nimport { generateSubView, generateView } from \"@dlightjs/view-generator\"\n\nconst devMode = process.env.NODE_ENV === \"development\"\n\nexport class PluginProvider {\n  // ---- Const Level\n  static defaultHTMLTags = [\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"area\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"base\",\n    \"bdi\",\n    \"bdo\",\n    \"blockquote\",\n    \"body\",\n    \"br\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"col\",\n    \"colgroup\",\n    \"data\",\n    \"datalist\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"dialog\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"embed\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"head\",\n    \"header\",\n    \"hgroup\",\n    \"hr\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"link\",\n    \"main\",\n    \"map\",\n    \"mark\",\n    \"menu\",\n    \"meta\",\n    \"meter\",\n    \"nav\",\n    \"noscript\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"output\",\n    \"p\",\n    \"picture\",\n    \"pre\",\n    \"progress\",\n    \"q\",\n    \"rp\",\n    \"rt\",\n    \"ruby\",\n    \"s\",\n    \"samp\",\n    \"script\",\n    \"section\",\n    \"select\",\n    \"slot\",\n    \"small\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"style\",\n    \"sub\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"template\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"title\",\n    \"tr\",\n    \"track\",\n    \"u\",\n    \"ul\",\n    \"var\",\n    \"video\",\n    \"wbr\",\n    \"acronym\",\n    \"applet\",\n    \"basefont\",\n    \"bgsound\",\n    \"big\",\n    \"blink\",\n    \"center\",\n    \"dir\",\n    \"font\",\n    \"frame\",\n    \"frameset\",\n    \"isindex\",\n    \"keygen\",\n    \"listing\",\n    \"marquee\",\n    \"menuitem\",\n    \"multicol\",\n    \"nextid\",\n    \"nobr\",\n    \"noembed\",\n    \"noframes\",\n    \"param\",\n    \"plaintext\",\n    \"rb\",\n    \"rtc\",\n    \"spacer\",\n    \"strike\",\n    \"tt\",\n    \"xmp\",\n    \"animate\",\n    \"animateMotion\",\n    \"animateTransform\",\n    \"circle\",\n    \"clipPath\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"feBlend\",\n    \"feColorMatrix\",\n    \"feComponentTransfer\",\n    \"feComposite\",\n    \"feConvolveMatrix\",\n    \"feDiffuseLighting\",\n    \"feDisplacementMap\",\n    \"feDistantLight\",\n    \"feDropShadow\",\n    \"feFlood\",\n    \"feFuncA\",\n    \"feFuncB\",\n    \"feFuncG\",\n    \"feFuncR\",\n    \"feGaussianBlur\",\n    \"feImage\",\n    \"feMerge\",\n    \"feMergeNode\",\n    \"feMorphology\",\n    \"feOffset\",\n    \"fePointLight\",\n    \"feSpecularLighting\",\n    \"feSpotLight\",\n    \"feTile\",\n    \"feTurbulence\",\n    \"filter\",\n    \"foreignObject\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"linearGradient\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"mpath\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"radialGradient\",\n    \"rect\",\n    \"set\",\n    \"stop\",\n    \"svg\",\n    \"switch\",\n    \"symbol\",\n    \"text\",\n    \"textPath\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n  ]\n\n  static availableDecoNames = [\"Static\", \"Prop\", \"Env\", \"Content\", \"Children\"]\n  static dlightDefaultPackageName = \"@dlightjs/dlight\"\n  static importMap = Object.fromEntries(\n    [\n      \"createTemplate\",\n      \"setStyle\",\n      \"setDataset\",\n      \"setEvent\",\n      \"setHTMLProp\",\n      \"setHTMLAttr\",\n      \"setHTMLProps\",\n      \"setHTMLAttrs\",\n      \"insertNode\",\n      \"createElement\",\n      \"ForNode\",\n      \"CondNode\",\n      \"EnvNode\",\n      \"createTextNode\",\n      \"updateText\",\n      \"ExpNode\",\n      \"PropView\",\n    ].map((funcName, idx) =>\n      devMode ? [funcName, funcName] : [funcName, `$${idx}$`]\n    )\n  )\n\n  private readonly dlightPackageName = PluginProvider.dlightDefaultPackageName\n\n  // ---- Plugin Level\n  private readonly babelApi: typeof babel\n  private readonly t: typeof t\n  private readonly traverse: typeof babel.traverse\n  private readonly enableDevTools: boolean\n  private readonly includes: string[]\n  private readonly excludes: string[]\n  private readonly htmlTags: string[]\n\n  constructor(\n    babelApi: typeof babel,\n    types: typeof t,\n    includes: string[],\n    excludes: string[],\n    enableDevTools: boolean,\n    htmlTags: HTMLTags\n  ) {\n    this.babelApi = babelApi\n    this.t = types\n    this.traverse = babelApi.traverse\n    this.includes = includes\n    this.excludes = excludes\n    this.enableDevTools = devMode && enableDevTools\n    this.htmlTags =\n      typeof htmlTags === \"function\"\n        ? htmlTags(PluginProvider.defaultHTMLTags)\n        : htmlTags.includes(\"*\")\n          ? [\n              ...new Set([...PluginProvider.defaultHTMLTags, ...htmlTags]),\n            ].filter(tag => tag !== \"*\")\n          : htmlTags\n  }\n\n  // ---- DLight class Level\n  private classRootPath?: NodePath<t.ClassDeclaration | t.ClassExpression>\n  private classDeclarationNode?: t.ClassDeclaration | t.ClassExpression\n  private classBodyNode?: t.ClassBody\n  private constructorNode?: t.ClassMethod\n  private propertiesContainer: PropertyContainer = {}\n  private dependencyMap: Record<string, string[]> = {}\n  private enter = true\n  private enterClassNode = false\n  private className?: string\n\n  // ---- File Level\n  private programNode?: t.Program\n  private allImports: t.ImportDeclaration[] = []\n  private didAlterImports = false\n\n  /* ---- DLight Class Level Hooks ---- */\n  /**\n   * @brief Clear all DLight Node Level variables after a class is transformed\n   */\n  clearNode() {\n    this.classRootPath = undefined\n    this.classDeclarationNode = undefined\n    this.classBodyNode = undefined\n    this.constructorNode = undefined\n    this.propertiesContainer = {}\n    this.dependencyMap = {}\n    this.enter = true\n    this.enterClassNode = false\n    this.className = undefined\n  }\n\n  private get availableProperties(): string[] {\n    return Object.entries(this.propertiesContainer)\n      .filter(\n        ([key, { isWatcher, isStatic, isChildren }]) =>\n          key !== \"_$compName\" && !isWatcher && !isStatic && !isChildren\n      )\n      .map(([key]) => key)\n  }\n\n  /**\n   * @brief Initialize DLight Node Level variables when entering a class\n   * @param path\n   */\n  initNode(path: NodePath<t.ClassDeclaration | t.ClassExpression>): void {\n    this.classRootPath = path\n    const node: t.ClassDeclaration | t.ClassExpression = path.node\n    this.classDeclarationNode = node\n    this.classBodyNode = node.body\n    this.propertiesContainer = {}\n\n    if (!node.id?.name) {\n      node.id = this.t.identifier(`Anonymous_${PluginProvider.uid()}`)\n    }\n    this.className = node.id?.name\n\n    // ---- Custom decorators\n    this.handleClassCustomDecorators()\n\n    // ---- If devtools is enabled, add _$compName property to the class\n    if (this.enableDevTools) {\n      this.classBodyNode.body.unshift(\n        this.t.classProperty(\n          this.t.identifier(\"_$compName\"),\n          this.t.stringLiteral(this.className)\n        )\n      )\n    }\n\n    this.addConstructor()\n\n    // ---- Add dlight import and alter import name,\n    //      Only do this when enter the first dlight class\n    if (!this.didAlterImports) {\n      // ---- Get DLight imports\n      const dlightImports = this.allImports.filter(\n        n => n.source.value === PluginProvider.dlightDefaultPackageName\n      )\n      // ---- Alter import name, e.g. \"@dlight/dlight-client\"\n      if (this.dlightPackageName !== PluginProvider.dlightDefaultPackageName) {\n        dlightImports.forEach(i => {\n          i.source.value = this.dlightPackageName\n        })\n      }\n\n      // ---- Add nodes import to the head of file\n      this.programNode!.body.unshift(\n        this.t.importDeclaration(\n          Object.entries(PluginProvider.importMap).map(([key, value]) =>\n            this.t.importSpecifier(\n              this.t.identifier(value),\n              this.t.identifier(key)\n            )\n          ),\n          this.t.stringLiteral(this.dlightPackageName)\n        )\n      )\n      this.didAlterImports = true\n    }\n  }\n\n  /* ---- Babel Visitors ---- */\n  private enterProgram(_path: NodePath<t.Program>): void {}\n  programEnterVisitor(\n    path: NodePath<t.Program>,\n    filename: string | undefined\n  ): void {\n    this.enter = this.fileAllowed(filename)\n    if (!this.enter) return\n    this.allImports = path.node.body.filter(n =>\n      this.t.isImportDeclaration(n)\n    ) as t.ImportDeclaration[]\n    const dlightImports = this.allImports.filter(\n      n => n.source.value === PluginProvider.dlightDefaultPackageName\n    )\n    if (dlightImports.length === 0) {\n      this.enter = false\n      return\n    }\n    this.programNode = path.node\n    this.enterProgram(path)\n  }\n\n  private exitProgram(_path: NodePath<t.Program>): void {}\n  programExitVisitor(path: NodePath<t.Program>): void {\n    if (!this.enter) return\n    this.didAlterImports = false\n    this.allImports = []\n    this.programNode = undefined\n    this.exitProgram(path)\n  }\n\n  private enterClass(\n    _path: NodePath<t.ClassDeclaration | t.ClassExpression>\n  ): void {}\n\n  classEnter(path: NodePath<t.ClassDeclaration | t.ClassExpression>): void {\n    if (!this.enter) return\n    this.enterClassNode = this.isDLightView(path)\n    if (!this.enterClass) return\n    this.initNode(path)\n    this.enterClass(path)\n  }\n\n  private exitClass(\n    _path: NodePath<t.ClassDeclaration | t.ClassExpression>\n  ): void {}\n\n  classExit(path: NodePath<t.ClassDeclaration | t.ClassExpression>): void {\n    if (!this.enter) return\n    if (!this.enterClassNode) return\n    this.transformDLightClass()\n    this.addInit()\n    this.exitClass(path)\n    this.clearNode()\n    this.enterClassNode = false\n  }\n\n  private visitClassMethod(_path: NodePath<t.ClassMethod>): void {}\n  classMethodVisitor(path: NodePath<t.ClassMethod>): void {\n    if (!this.enterClassNode) return\n    if (!this.t.isIdentifier(path.node.key)) return\n    const key = path.node.key.name\n    if (key === \"View\") return\n\n    const isSubView = this.findDecoratorByName(path.node.decorators, \"View\")\n    if (isSubView) return\n    const node = path.node\n\n    // ---- Handle watcher\n    // ---- Get watcher decorator or watcher function decorator\n    // ---- Watcher auto collect deps:\n    //       @Watch\n    //       watcher() { myFunc() }\n    // ---- Watcher function manual set deps:\n    //       @Watch([\"count\", \"flag\"])\n    //       watcherFunc() { myFunc() }\n    const watchDeco = this.findDecoratorByName(node.decorators, \"Watch\")\n    if (!watchDeco) {\n      if (this.t.isIdentifier(node.key, { name: \"constructor\" })) return\n      this.autoBindMethods(node)\n      return\n    }\n    // ---- Get dependencies from watcher decorator or watcher function decorator\n    let deps: string[] = []\n    if (this.t.isIdentifier(watchDeco)) {\n      deps = this.getDependencies(path)\n    } else {\n      const listenDeps = watchDeco.arguments[0]\n      if (this.t.isArrayExpression(listenDeps)) {\n        deps = listenDeps.elements\n          .filter(arg => this.t.isStringLiteral(arg))\n          .map(arg => (arg as t.StringLiteral).value)\n        deps = [...new Set(deps)]\n      }\n    }\n    // ---- Register watcher to propertiesContainer\n    this.propertiesContainer[key] = {\n      node,\n      deps,\n      isWatcher: true,\n    }\n    node.decorators = this.removeDecorators(node.decorators, [\"Watch\"])\n\n    this.visitClassMethod(path)\n  }\n\n  private visitClassProperty(_path: NodePath<t.ClassProperty>): void {}\n  classPropertyVisitor(path: NodePath<t.ClassProperty>): void {\n    if (!this.enterClassNode) return\n    const node = path.node\n    if (!this.t.isIdentifier(node.key)) return\n    const key = node.key.name\n    if (key === \"View\") return\n    const decorators = node.decorators\n    const isSubView = this.findDecoratorByName(decorators, \"View\")\n    if (isSubView) return\n    const isProp = !!this.findDecoratorByName(decorators, \"Prop\")\n    const isEnv = !!this.findDecoratorByName(decorators, \"Env\")\n\n    const isChildren = !!this.findDecoratorByName(node.decorators, \"Children\")\n\n    const deps = !isChildren ? this.getDependencies(path) : []\n\n    this.propertiesContainer[key] = {\n      node,\n      deps,\n      isStatic: !!this.findDecoratorByName(decorators, \"Static\"),\n      isContent: !!this.findDecoratorByName(decorators, \"Content\"),\n      isChildren,\n      isPropOrEnv: isProp ? \"Prop\" : isEnv ? \"Env\" : undefined,\n    }\n\n    node.decorators = this.removeDecorators(\n      decorators,\n      PluginProvider.availableDecoNames\n    )\n    this.visitClassProperty(path)\n  }\n\n  /* ---- Decorator Resolvers ---- */\n  /**\n   * @brief Decorator resolver: Watcher\n   * Add:\n   * $wW${key}\n   * @param node\n   */\n  resolveWatcherDecorator(node: t.ClassMethod): void {\n    if (!this.t.isIdentifier(node.key)) return\n    const key = node.key.name\n    const propertyIdx = this.classBodyNode!.body.indexOf(node)\n    const watcherNode = this.t.classProperty(this.t.identifier(`$w$${key}`))\n    this.classBodyNode!.body.splice(propertyIdx, 0, watcherNode)\n  }\n\n  /**\n   * @brief Decorator resolver: Children\n   * Add:\n   * get ${key}() {\n   *  return this._$children\n   * }\n   * @param node\n   */\n  resolveChildrenDecorator(node: t.ClassProperty) {\n    if (!this.classBodyNode) return\n    if (!this.t.isIdentifier(node.key)) return\n    const key = node.key.name\n    const propertyIdx = this.classBodyNode.body.indexOf(node)\n\n    const childrenFuncCallNode = this.t.memberExpression(\n      this.t.thisExpression(),\n      this.t.identifier(\"_$children\")\n    )\n\n    const getterNode = this.t.classMethod(\n      \"get\",\n      this.t.identifier(key),\n      [],\n      this.t.blockStatement([this.t.returnStatement(childrenFuncCallNode)])\n    )\n    this.classBodyNode.body.splice(propertyIdx, 1, getterNode)\n  }\n\n  /**\n   * @brief Decorator resolver: Content\n   * Add:\n   * _$contentKey = \"key\"\n   * @param node\n   */\n  resolveContentDecorator(node: t.ClassProperty) {\n    if (!this.classBodyNode) return\n    if (!this.t.isIdentifier(node.key)) return\n\n    // ---- Already has _$contentKey\n    if (\n      this.classBodyNode.body.some(\n        n =>\n          this.t.isClassProperty(n) &&\n          (n.key as t.Identifier).name === \"_$contentKey\"\n      )\n    )\n      return\n    const key = node.key.name\n    const propertyIdx = this.classBodyNode.body.indexOf(node)\n\n    const derivedStatusKey = this.t.classProperty(\n      this.t.identifier(\"_$contentKey\"),\n      this.t.stringLiteral(key)\n    )\n    this.classBodyNode.body.splice(propertyIdx, 0, derivedStatusKey)\n  }\n\n  /**\n   * @brief Decorator resolver: Prop/Env\n   * Add:\n   * $p/e$${key}\n   * @param node\n   */\n  resolvePropDecorator(node: t.ClassProperty, decoratorName: \"Prop\" | \"Env\") {\n    if (!this.classBodyNode) return\n    if (!this.t.isIdentifier(node.key)) return\n    const key = node.key.name\n    const propertyIdx = this.classBodyNode.body.indexOf(node)\n    const tag = decoratorName.toLowerCase() === \"prop\" ? \"p\" : \"e\"\n    const derivedStatusKey = this.t.classProperty(\n      this.t.identifier(`$${tag}$${key}`)\n    )\n    this.classBodyNode.body.splice(propertyIdx, 0, derivedStatusKey)\n  }\n\n  /**\n   * @brief Decorator resolver: State\n   * Add:\n   *  $${key} = ${value}\n   *  $$${key} = ${depIdx}\n   *  $sub$${key} = [${reversedDeps}]\n   *  get ${key}() {\n   *    return this.$${key}\n   *  }\n   *  set ${key}(value) {\n   *    this._$updateProp(\"${key}\", value)\n   *  }\n   * @param node\n   */\n  resolveStateDecorator(\n    node: t.ClassProperty,\n    idx: number,\n    reverseDeps: Set<string> | undefined\n  ) {\n    if (!this.classBodyNode) return\n    if (!this.t.isIdentifier(node.key)) return\n    const key = node.key.name\n    node.key.name = `$${key}`\n    const propertyIdx = this.classBodyNode.body.indexOf(node)\n\n    const idxNode = this.t.classProperty(\n      this.t.identifier(`$$${key}`),\n      this.t.numericLiteral(1 << idx)\n    )\n\n    const depsNode = reverseDeps\n      ? [\n          this.t.classProperty(\n            this.t.identifier(`$s$${key}`),\n            this.t.arrayExpression(\n              [...reverseDeps].map(d => this.t.stringLiteral(d))\n            )\n          ),\n        ]\n      : []\n\n    const getterNode = this.t.classMethod(\n      \"get\",\n      this.t.identifier(key),\n      [],\n      this.t.blockStatement([\n        this.t.returnStatement(\n          this.t.memberExpression(\n            this.t.thisExpression(),\n            this.t.identifier(`$${key}`)\n          )\n        ),\n      ])\n    )\n\n    const setterNode = this.t.classMethod(\n      \"set\",\n      this.t.identifier(key),\n      [this.t.identifier(\"value\")],\n      this.t.blockStatement([\n        this.t.expressionStatement(\n          this.t.callExpression(\n            this.t.memberExpression(\n              this.t.thisExpression(),\n              this.t.identifier(\"_$updateProp\")\n            ),\n            [this.t.stringLiteral(key), this.t.identifier(\"value\")]\n          )\n        ),\n      ])\n    )\n\n    this.classBodyNode.body.splice(\n      propertyIdx + 1,\n      0,\n      idxNode,\n      ...depsNode,\n      getterNode,\n      setterNode\n    )\n  }\n\n  /* ---- Helper Functions ---- */\n\n  handleClassCustomDecorators() {\n    if (!this.classBodyNode) return\n    const decorators = this.classDeclarationNode?.decorators\n    if (!decorators) return\n    // ---- Forward Prop\n    const forwardPropDeco = this.findDecoratorByName(decorators, \"ForwardProps\")\n    /**\n     * _$forwardProp\n     * _$forwardPropMap = new Set()\n     * _$forwardPropsId = []\n     */\n    if (forwardPropDeco) {\n      this.classBodyNode.body.unshift(\n        this.t.classProperty(this.t.identifier(\"_$forwardProps\")),\n        this.t.classProperty(\n          this.t.identifier(\"_$forwardPropsSet\"),\n          this.t.newExpression(this.t.identifier(\"Set\"), [])\n        ),\n        this.t.classProperty(\n          this.t.identifier(\"_$forwardPropsId\"),\n          this.t.arrayExpression([])\n        )\n      )\n      this.classDeclarationNode!.decorators = this.removeDecorators(\n        decorators,\n        [\"ForwardProps\"]\n      )\n    }\n  }\n\n  /**\n   * @brief Transform the whole DLight class when exiting the class\n   *  1. Alter all the state properties\n   *  2. Transform MainView and SubViews with DLight syntax\n   */\n  transformDLightClass(): void {\n    const usedProperties = this.handleView()\n    const propertyArr = Object.entries(this.propertiesContainer).reverse()\n    const depReversedMap = this.dependencyMapReversed()\n\n    for (const [\n      key,\n      { node, deps, isStatic, isChildren, isPropOrEnv, isWatcher, isContent },\n    ] of propertyArr) {\n      if (isChildren) {\n        this.resolveChildrenDecorator(node as t.ClassProperty)\n        continue\n      }\n      if (deps.length > 0) {\n        usedProperties.push(...deps)\n        if (isWatcher) this.resolveWatcherDecorator(node as t.ClassMethod)\n        else this.handleDerivedProperty(node as t.ClassProperty)\n      }\n      if (isPropOrEnv) {\n        this.resolvePropDecorator(node as t.ClassProperty, isPropOrEnv)\n      }\n      if (isContent) {\n        this.resolvePropDecorator(node as t.ClassProperty, \"Prop\")\n        this.resolveContentDecorator(node as t.ClassProperty)\n      }\n      if (isStatic) continue\n      if (usedProperties.includes(key)) {\n        this.resolveStateDecorator(\n          node as t.ClassProperty,\n          this.availableProperties.indexOf(key),\n          depReversedMap[key]\n        )\n      }\n    }\n  }\n\n  /* ---- DLight Class View Handlers ---- */\n  /**\n   * @brief Transform Body and SubViews with DLight syntax\n   * @returns used properties\n   */\n  handleView(): string[] {\n    if (!this.classBodyNode) return []\n    const usedPropertySet = new Set<string>()\n    let mainView: undefined | t.ClassMethod\n    const subViewNodes: t.ClassMethod[] = []\n    for (let viewNode of this.classBodyNode.body) {\n      if (!this.t.isClassProperty(viewNode) && !this.t.isClassMethod(viewNode))\n        continue\n      if (!this.t.isIdentifier(viewNode.key)) continue\n      const isSubView = this.findDecoratorByName(viewNode.decorators, \"View\")\n      const isMainView = viewNode.key.name === \"View\"\n      if (!isSubView && !isMainView) continue\n\n      if (this.t.isClassProperty(viewNode)) {\n        // ---- Handle TSAsExpression, e.g. MyView = (() => {}) as Type1 as Type2\n        let exp = viewNode.value\n        while (this.t.isTSAsExpression(exp)) exp = exp.expression\n        if (!this.t.isArrowFunctionExpression(exp)) continue\n        viewNode.value = exp\n        // ---- Transform arrow function property into method\n        const newViewNode = this.arrowFunctionPropertyToMethod(viewNode)\n        if (!newViewNode) continue\n        viewNode = newViewNode\n      }\n\n      if (isSubView) {\n        viewNode.decorators = null\n        subViewNodes.push(viewNode)\n      } else {\n        mainView = viewNode\n      }\n    }\n\n    const subViewNames = subViewNodes.map(v => (v.key as t.Identifier).name)\n    const subViewPropSubDepMap: SubViewPropSubDepMap = Object.fromEntries(\n      subViewNodes\n        .map(v => {\n          const prop = v.params[0]\n          if (!prop || !this.t.isObjectPattern(prop)) return [\"-\", null as any]\n          const props = Object.fromEntries(\n            prop.properties\n              .map(p => {\n                if (!this.t.isObjectProperty(p)) return [\"-\", null]\n                const key = (p.key as t.Identifier).name\n                // ---- Get identifiers that depend on this prop\n                const subDeps = this.getIdentifiers(\n                  // ---- Some unimportant value wrapper\n                  this.t.assignmentExpression(\n                    \"=\",\n                    this.t.objectPattern([\n                      this.t.objectProperty(this.t.numericLiteral(0), p.value),\n                    ]),\n                    this.t.numericLiteral(0)\n                  )\n                ).filter(v => v !== key)\n                return [key, subDeps]\n              })\n              .filter(([_, props]) => props)\n          )\n          return [(v.key as t.Identifier).name, props]\n        })\n        .filter(([_, props]) => props)\n    )\n    let templateIdx = -1\n    if (mainView) {\n      let usedProperties\n      ;[usedProperties, templateIdx] = this.alterMainView(\n        mainView,\n        subViewNames,\n        subViewPropSubDepMap\n      )\n      usedProperties.forEach(usedPropertySet.add.bind(usedPropertySet))\n    }\n\n    subViewNodes.forEach(viewNode => {\n      let usedProperties\n      ;[usedProperties, templateIdx] = this.alterSubView(\n        viewNode,\n        subViewNames,\n        subViewPropSubDepMap,\n        templateIdx\n      )\n      usedProperties.forEach(usedPropertySet.add.bind(usedPropertySet))\n    })\n\n    const usedProperties: string[] = []\n    this.availableProperties.forEach(p => {\n      if (usedPropertySet.has(p)) usedProperties.push(p)\n    })\n    // const usedProperties = usedPropertyDeps.map(dep => dep.slice(1, -4))\n    return usedProperties\n  }\n\n  /**\n   * @brief Transform Views with DLight syntax\n   * @param viewNode\n   * @param subViewNames\n   * @param isSubView\n   * @returns Used properties\n   */\n  alterMainView(\n    viewNode: t.ClassMethod,\n    subViewNames: string[],\n    subViewPropSubDepMap: SubViewPropSubDepMap\n  ): [Set<string>, number] {\n    const viewUnits = parseView(viewNode.body, {\n      babelApi: this.babelApi,\n      subviewNames: subViewNames,\n      htmlTags: this.htmlTags,\n    })\n\n    const [viewParticles, usedPropertySet] = parseReactivity(viewUnits, {\n      babelApi: this.babelApi,\n      availableProperties: this.availableProperties,\n      dependencyMap: this.dependencyMap,\n    })\n\n    const [body, classProperties, templateIdx] = generateView(viewParticles, {\n      babelApi: this.babelApi,\n      className: this.className!,\n      importMap: PluginProvider.importMap,\n      subViewPropMap: Object.fromEntries(\n        Object.entries(subViewPropSubDepMap).map(([key, props]) => [\n          key,\n          Object.keys(props),\n        ])\n      ),\n      templateIdx: -1,\n    })\n    viewNode.body = body\n    this.classBodyNode?.body.push(...classProperties)\n\n    return [usedPropertySet, templateIdx]\n  }\n\n  alterSubView(\n    viewNode: t.ClassMethod,\n    subViewNames: string[],\n    subViewPropSubDepMap: SubViewPropSubDepMap,\n    templateIdx: number\n  ): [Set<string>, number] {\n    const viewUnits = parseView(viewNode.body, {\n      babelApi: this.babelApi,\n      subviewNames: subViewNames,\n      htmlTags: this.htmlTags,\n    })\n    const [viewParticlesProperty, usedPropertySet] = parseReactivity(\n      viewUnits,\n      {\n        babelApi: this.babelApi,\n        availableProperties: this.availableProperties,\n        dependencyMap: this.dependencyMap,\n      }\n    )\n\n    const subViewProp =\n      subViewPropSubDepMap[(viewNode.key as t.Identifier).name] ?? []\n    const identifierDepMap: Record<string, string[]> = {}\n    Object.entries(subViewProp).forEach(([key, subDeps]) => {\n      subDeps.forEach(dep => {\n        identifierDepMap[dep] = [key]\n      })\n    })\n\n    const [viewParticlesIdentifier] = parseReactivity(viewUnits, {\n      babelApi: this.babelApi,\n      availableProperties: Object.keys(subViewProp),\n      dependencyMap: this.dependencyMap,\n      dependencyParseType: \"identifier\",\n      identifierDepMap,\n    })\n\n    const subViewPropMap = Object.fromEntries(\n      Object.entries(subViewPropSubDepMap).map(([key, props]) => [\n        key,\n        Object.keys(props),\n      ])\n    )\n    const [body, classProperties, newTemplateIdx] = generateSubView(\n      viewParticlesProperty,\n      viewParticlesIdentifier,\n      viewNode.params[0] as t.ObjectPattern,\n      {\n        babelApi: this.babelApi,\n        className: this.className!,\n        importMap: PluginProvider.importMap,\n        subViewPropMap,\n        templateIdx,\n      }\n    )\n    viewNode.body = body\n    this.classBodyNode?.body.push(...classProperties)\n\n    return [usedPropertySet, newTemplateIdx]\n  }\n\n  /**\n   * @brief Test if the file is allowed to be transformed\n   * @param fileName\n   * @returns is file allowed\n   */\n  private fileAllowed(fileName: string | undefined): boolean {\n    if (this.includes.includes(\"*\")) return true\n    if (!fileName) return false\n    if (this.excludes.some(pattern => minimatch(fileName, pattern)))\n      return false\n    if (!this.includes.some(pattern => minimatch(fileName, pattern)))\n      return false\n    return true\n  }\n\n  /**\n   * @brief Test if the class is a dlight view\n   * @param path\n   * @returns\n   */\n  private isDLightView(\n    path: NodePath<t.ClassDeclaration | t.ClassExpression>\n  ): boolean {\n    const node = path.node\n    const decorators = node.decorators ?? []\n    const isDecorator = decorators.find((deco: t.Decorator) =>\n      this.t.isIdentifier(deco.expression, { name: \"View\" })\n    )\n    if (isDecorator) {\n      node.superClass = this.t.identifier(\"View\")\n      node.decorators = node.decorators?.filter(\n        (deco: t.Decorator) =>\n          !this.t.isIdentifier(deco.expression, { name: \"View\" })\n      )\n    }\n    return this.t.isIdentifier(node.superClass, { name: \"View\" })\n  }\n\n  /**\n   * @brief Remove decorators by name\n   *  Only search for Identifier and CallExpression, e.g, @Ok, @Ok()\n   * @param decorators\n   * @param names\n   * @returns new decorators\n   */\n  private removeDecorators(\n    decorators: t.Decorator[] | undefined | null,\n    names: string[]\n  ): t.Decorator[] {\n    if (!decorators) return []\n    return decorators.filter(\n      d =>\n        !(\n          (this.t.isIdentifier(d.expression) &&\n            names.includes(d.expression.name)) ||\n          (this.t.isCallExpression(d.expression) &&\n            this.t.isIdentifier(d.expression.callee) &&\n            names.includes(d.expression.callee.name))\n        )\n    )\n  }\n\n  /**\n   * @brief Find decorator by name,\n   *  Only search for Identifier and CallExpression, e.g, @Ok, @Ok()\n   * @param decorators\n   * @param name\n   * @returns Identifier or CallExpression or nothing\n   */\n  private findDecoratorByName(\n    decorators: t.Decorator[] | undefined | null,\n    name: string\n  ): t.Identifier | t.CallExpression | undefined {\n    if (!decorators) return\n    return decorators.find(\n      deco =>\n        this.t.isIdentifier(deco.expression, { name }) ||\n        (this.t.isCallExpression(deco.expression) &&\n          this.t.isIdentifier(deco.expression.callee, { name }))\n    )?.expression as t.Identifier | t.CallExpression | undefined\n  }\n\n  /**\n   * constructor(props, content, children, forwardPropsScope) {\n   *  super()\n   * }\n   */\n  addConstructor() {\n    if (!this.classBodyNode) return\n    let constructor = this.classBodyNode.body.find(n =>\n      this.t.isClassMethod(n, { kind: \"constructor\" })\n    ) as t.ClassMethod\n    if (constructor) throw new Error(\"DLight class should not have constructor\")\n\n    constructor = this.t.classMethod(\n      \"constructor\",\n      this.t.identifier(\"constructor\"),\n      [\n        this.t.identifier(\"props\"),\n        this.t.identifier(\"content\"),\n        this.t.identifier(\"children\"),\n        this.t.identifier(\"forwardPropsScope\"),\n      ],\n      this.t.blockStatement([\n        this.t.expressionStatement(this.t.callExpression(this.t.super(), [])),\n      ])\n    )\n    this.constructorNode = constructor\n    this.classBodyNode.body.unshift(constructor)\n  }\n\n  addInit() {\n    this.constructorNode!.body.body.push(\n      this.t.expressionStatement(\n        this.t.callExpression(\n          this.t.memberExpression(\n            this.t.thisExpression(),\n            this.t.identifier(\"_$init\")\n          ),\n          [\n            this.t.identifier(\"props\"),\n            this.t.identifier(\"content\"),\n            this.t.identifier(\"children\"),\n            this.t.identifier(\"forwardPropsScope\"),\n          ]\n        )\n      )\n    )\n  }\n\n  autoBindMethods(node: t.ClassMethod) {\n    this.constructorNode!.body.body.push(\n      this.t.expressionStatement(\n        this.t.assignmentExpression(\n          \"=\",\n          this.t.memberExpression(this.t.thisExpression(), node.key),\n          this.t.callExpression(\n            this.t.memberExpression(\n              this.t.memberExpression(this.t.thisExpression(), node.key),\n              this.t.identifier(\"bind\")\n            ),\n            [this.t.thisExpression()]\n          )\n        )\n      )\n    )\n  }\n\n  /**\n   * ${key}\n   * get $f$${key}() {\n   *  return ${value}\n   * }\n   */\n  handleDerivedProperty(node: t.ClassProperty) {\n    if (!this.t.isIdentifier(node.key)) return\n    const key = node.key.name\n    const value = node.value\n    const propertyIdx = this.classBodyNode!.body.indexOf(node)\n    const getterNode = this.t.classMethod(\n      \"get\",\n      this.t.identifier(`$f$${key}`),\n      [],\n      this.t.blockStatement([this.t.returnStatement(value)])\n    )\n    this.classBodyNode!.body.splice(propertyIdx + 1, 0, getterNode)\n    node.value = null\n  }\n\n  /**\n   * @brief Get all valid dependencies of a babel path\n   * @param path\n   * @returns dependencies\n   */\n  getDependencies(path: NodePath<t.ClassMethod | t.ClassProperty>): string[] {\n    const node = path.node\n    if (!this.t.isIdentifier(node.key)) return []\n\n    // ---- Deps: console.log(this.count)\n    const deps = new Set<string>()\n    // ---- Assign deps: this.count = 1 / this.count++\n    const assignDeps = new Set<string>()\n    path.scope.traverse(node, {\n      MemberExpression: innerPath => {\n        if (!this.t.isIdentifier(innerPath.node.property)) return\n        const propertyKey = innerPath.node.property.name\n        if (this.isAssignmentExpressionLeft(innerPath)) {\n          assignDeps.add(propertyKey)\n        } else if (\n          this.availableProperties.includes(propertyKey) &&\n          this.t.isThisExpression(innerPath.node.object) &&\n          !this.isMemberInEscapeFunction(\n            innerPath,\n            this.classDeclarationNode!\n          ) &&\n          !this.isMemberInManualFunction(\n            innerPath,\n            this.classDeclarationNode!\n          ) &&\n          !this.isAssignmentExpressionRight(\n            innerPath,\n            this.classDeclarationNode!\n          )\n        ) {\n          deps.add(propertyKey)\n          this.dependencyMap[propertyKey]?.forEach(deps.add.bind(deps))\n        }\n      },\n    })\n\n    // ---- Eliminate deps that are assigned in the same method\n    //      e.g. { console.log(this.count); this.count = 1 }\n    //      this will cause infinite loop\n    //      so we eliminate \"count\" from deps\n    assignDeps.forEach(deps.delete.bind(deps))\n\n    // ---- Add deps to dependencyMap\n    const propertyKey = node.key.name\n    const depArr = [...deps]\n    if (deps.size > 0) {\n      this.dependencyMap[propertyKey] = depArr\n    }\n\n    return depArr\n  }\n\n  private dependencyMapReversed() {\n    const reversedMap: Record<string, Set<string>> = {}\n    Object.entries(this.dependencyMap).forEach(([key, deps]) => {\n      deps.forEach(dep => {\n        if (!reversedMap[dep]) reversedMap[dep] = new Set()\n        reversedMap[dep].add(key)\n      })\n    })\n\n    return reversedMap\n  }\n\n  /**\n   * @brief Transform arrow function property to method\n   * @param propertyNode\n   * @returns new method node\n   */\n  arrowFunctionPropertyToMethod(\n    propertyNode: t.ClassProperty\n  ): t.ClassMethod | undefined {\n    if (!this.t.isArrowFunctionExpression(propertyNode.value)) return\n    const value = propertyNode.value\n    if (!this.t.isBlockStatement(value.body)) return\n    // ---- Remove property\n    const propertyIdx = this.classBodyNode!.body.indexOf(propertyNode)\n    // ---- Add method\n    const methodNode = this.t.classMethod(\n      \"method\",\n      propertyNode.key,\n      value.params,\n      value.body\n    )\n    this.classBodyNode!.body.splice(propertyIdx, 1, methodNode)\n\n    return methodNode\n  }\n\n  /**\n   * @brief Check if a member expression is a property of a member expression\n   * @param parentNode\n   * @param currentNode\n   * @returns is a property of a member expression\n   */\n  isMemberExpressionProperty(parentNode: t.Node, currentNode: t.Node): boolean {\n    return (\n      this.t.isMemberExpression(parentNode) &&\n      !parentNode.computed &&\n      parentNode.property === currentNode\n    )\n  }\n\n  /**\n   * @brief Check if a member expression is a key of an object\n   * @param parentNode\n   * @param currentNode\n   * @returns is a key of an object\n   */\n  isObjectKey(parentNode: t.Node, currentNode: t.Node): boolean {\n    return this.t.isObjectProperty(parentNode) && parentNode.key === currentNode\n  }\n\n  /**\n   * @brief Add arrow function to property value\n   * @param node\n   */\n  valueWithArrowFunc(node: t.ClassProperty): void {\n    if (!node.value) {\n      node.value = this.t.identifier(\"undefined\")\n    }\n    node.value = this.t.arrowFunctionExpression([], node.value)\n  }\n\n  /**\n   * @brief Wrap the value in a file\n   * @param node\n   * @returns wrapped value\n   */\n  private valueWrapper(node: t.Expression | t.Statement): t.File {\n    return this.t.file(\n      this.t.program([\n        this.t.isStatement(node) ? node : this.t.expressionStatement(node),\n      ])\n    )\n  }\n\n  /**\n   * @brief check if the identifier is from a function param till the stopNode\n   *  e.g:\n   *  function myFunc1(ok) { // stopNode = functionBody\n   *     const myFunc2 = ok => ok // from function param\n   *     console.log(ok) // not from function param\n   *  }\n   * @param path\n   * @param idName\n   */\n  private isAttrFromFunction(path: NodePath, idName: string) {\n    let reversePath = path.parentPath\n\n    const checkParam: (param: t.Node) => boolean = (param: t.Node) => {\n      // ---- 3 general types:\n      //      * represent allow nesting\n      // ---0 Identifier: (a)\n      // ---1 RestElement: (...a)   *\n      // ---1 Pattern: 3 sub Pattern\n      // -----0   AssignmentPattern: (a=1)   *\n      // -----1   ArrayPattern: ([a, b])   *\n      // -----2   ObjectPattern: ({a, b})\n      if (this.t.isIdentifier(param)) return param.name === idName\n      if (this.t.isAssignmentPattern(param)) return checkParam(param.left)\n      if (this.t.isArrayPattern(param)) {\n        return param.elements\n          .filter(Boolean)\n          .map(el => checkParam(el!))\n          .includes(true)\n      }\n      if (this.t.isObjectPattern(param)) {\n        return (\n          param.properties.filter(\n            prop =>\n              this.t.isObjectProperty(prop) && this.t.isIdentifier(prop.key)\n          ) as t.ObjectProperty[]\n        )\n          .map(prop => (prop.key as t.Identifier).name)\n          .includes(idName)\n      }\n      if (this.t.isRestElement(param)) return checkParam(param.argument)\n\n      return false\n    }\n\n    while (reversePath) {\n      const node = reversePath.node\n      if (\n        this.t.isArrowFunctionExpression(node) ||\n        this.t.isFunctionDeclaration(node)\n      ) {\n        for (const param of node.params) {\n          if (checkParam(param)) return true\n        }\n      }\n      reversePath = reversePath.parentPath\n    }\n\n    return false\n  }\n\n  /**\n   * @brief Check if an identifier is a simple identifier, i.e., not a member expression, or a function param\n   * @param path\n   *  1. not a member expression\n   *  2. not a function param\n   *  3. not in a declaration\n   *  4. not as object property's not computed key\n   */\n  private isStandAloneIdentifier(path: NodePath<t.Identifier>) {\n    const node = path.node\n    const parentNode = path.parentPath?.node\n    const isMemberExpression =\n      this.t.isMemberExpression(parentNode) && parentNode.property === node\n    if (isMemberExpression) return false\n    const isFunctionParam = this.isAttrFromFunction(path, node.name)\n    if (isFunctionParam) return false\n    while (path.parentPath) {\n      if (this.t.isVariableDeclarator(path.parentPath.node)) return false\n      if (\n        this.t.isObjectProperty(path.parentPath.node) &&\n        path.parentPath.node.key === path.node &&\n        !path.parentPath.node.computed\n      )\n        return false\n      path = path.parentPath as any\n    }\n    return true\n  }\n\n  /**\n   * @brief Get all identifiers as strings in a node\n   * @param node\n   * @returns identifiers\n   */\n  private getIdentifiers(node: t.Node): string[] {\n    if (this.t.isIdentifier(node)) return [node.name]\n    const identifierKeys = new Set<string>()\n    this.traverse(this.valueWrapper(node as any), {\n      Identifier: innerPath => {\n        if (!this.isStandAloneIdentifier(innerPath)) return\n        identifierKeys.add(innerPath.node.name)\n      },\n    })\n    return [...identifierKeys]\n  }\n\n  static escapeNamings = [\"escape\", \"$\"]\n\n  /**\n   * @brief Check if it's the left side of an assignment expression, e.g. this.count = 1\n   * @param innerPath\n   * @returns is left side of an assignment expression\n   */\n  isAssignmentExpressionLeft(innerPath: NodePath): boolean {\n    const parentNode = innerPath.parentPath?.node\n\n    return (\n      (this.t.isAssignmentExpression(parentNode) &&\n        parentNode.left === innerPath.node) ||\n      this.t.isUpdateExpression(parentNode)\n    )\n  }\n\n  /**\n   * @brief Check if a member expression is the right side of an assignment expression\n   *   e.g. this.count = this.count + 1\n   * @param innerPath\n   * @returns is the right side of an assignment expression\n   */\n  isAssignmentExpressionRight(\n    innerPath: NodePath<t.MemberExpression>,\n    stopNode: t.Node\n  ): boolean {\n    const currNode = innerPath.node\n\n    let isRightExp = false\n    let reversePath: NodePath<t.Node> | null = innerPath.parentPath\n    while (reversePath && reversePath.node !== stopNode) {\n      if (this.t.isAssignmentExpression(reversePath.node)) {\n        const leftNode = reversePath.node.left as t.MemberExpression\n        const typeEqual = currNode.type === leftNode.type\n        const identifierEqual =\n          (currNode.property as t.Identifier).name ===\n          (leftNode.property as t.Identifier).name\n        isRightExp = typeEqual && identifierEqual\n      }\n      reversePath = reversePath.parentPath\n    }\n\n    return isRightExp\n  }\n\n  /**\n   * @brief Check if it's in an \"escape\" function,\n   *        e.g. escape(() => { console.log(this.count) })\n   *              deps will be empty instead of [\"count\"]\n   * @param innerPath\n   * @param classDeclarationNode\n   * @returns is in escape function\n   */\n  isMemberInEscapeFunction(innerPath: NodePath, stopNode: t.Node): boolean {\n    let isInFunction = false\n    let reversePath = innerPath.parentPath\n    while (reversePath && reversePath.node !== stopNode) {\n      const node = reversePath.node\n      if (\n        this.t.isCallExpression(node) &&\n        this.t.isIdentifier(node.callee) &&\n        PluginProvider.escapeNamings.includes(node.callee.name)\n      ) {\n        isInFunction = true\n        break\n      }\n      reversePath = reversePath.parentPath\n    }\n    return isInFunction\n  }\n\n  /**\n   * @brief Check if it's in a \"manual\" function,\n   *        e.g. manual(() => { console.log(this.count) }, [\"flag\"])\n   *             deps will be [\"flag\"] instead of [\"count\"]\n   * @param innerPath\n   * @param classDeclarationNode\n   * @returns is in manual function\n   */\n  isMemberInManualFunction(innerPath: NodePath, stopNode: t.Node): boolean {\n    let isInFunction = false\n    let reversePath = innerPath.parentPath\n    while (reversePath && reversePath.node !== stopNode) {\n      const node = reversePath.node\n      const parentNode = reversePath.parentPath?.node\n      const isFunction =\n        this.t.isFunctionExpression(node) ||\n        this.t.isArrowFunctionExpression(node)\n      const isManual =\n        this.t.isCallExpression(parentNode) &&\n        this.t.isIdentifier(parentNode.callee) &&\n        parentNode.callee.name === \"manual\"\n      if (isFunction && isManual) {\n        isInFunction = true\n        break\n      }\n      reversePath = reversePath.parentPath\n    }\n\n    return isInFunction\n  }\n\n  /**\n   * @brief Generate a random string\n   * @param length\n   * @returns random string\n   */\n  private static uid(length = 4): string {\n    return Math.random()\n      .toString(32)\n      .slice(2, length + 2)\n  }\n}\n\n/**\n * @brief Change the PluginProvider class for class inheritance\n */\nexport let PluginProviderClass = PluginProvider\nexport function changePluginProviderClass(cls: typeof PluginProvider) {\n  PluginProviderClass = cls\n}\n","import type babel from \"@babel/core\"\nimport { type PluginObj } from \"@babel/core\"\nimport { PluginProviderClass } from \"./pluginProvider\"\nimport { type DLightOption } from \"./types\"\n\nexport default function (api: typeof babel, options: DLightOption): PluginObj {\n  const { types } = api\n  const {\n    files = \"**/*.{js,jsx,ts,tsx}\",\n    excludeFiles = \"**/{dist,node_modules,lib}/*.{js,ts}\",\n    enableDevTools = false,\n    htmlTags = defaultHtmlTags => defaultHtmlTags,\n  } = options\n\n  const pluginProvider = new PluginProviderClass(\n    api,\n    types,\n    Array.isArray(files) ? files : [files],\n    Array.isArray(excludeFiles) ? excludeFiles : [excludeFiles],\n    enableDevTools,\n    htmlTags\n  )\n\n  return {\n    visitor: {\n      Program: {\n        enter(path, { filename }) {\n          return pluginProvider.programEnterVisitor(path, filename)\n        },\n        exit: pluginProvider.programExitVisitor.bind(pluginProvider),\n      },\n      ClassDeclaration: {\n        enter: pluginProvider.classEnter.bind(pluginProvider),\n        exit: pluginProvider.classExit.bind(pluginProvider),\n      },\n      ClassExpression: {\n        enter: pluginProvider.classEnter.bind(pluginProvider),\n        exit: pluginProvider.classExit.bind(pluginProvider),\n      },\n      ClassMethod: pluginProvider.classMethodVisitor.bind(pluginProvider),\n      ClassProperty: pluginProvider.classPropertyVisitor.bind(pluginProvider),\n    },\n  }\n}\n"],"mappings":"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KACA,OACA,IACA,OACA,SACA,UACA,SACA,OACA,QACA,SACA,OACA,SACA,QACA,MACA,UACA,MACA,QACA,QACA,KACA,WACA,WACA,QACA,KACA,QACA,OACA,QACA,KACA,QACA,IACA,KACA,MACA,QACA,MACA,UACA,SACA,WACA,UACA,MACA,QACA,SACA,MACA,OACA,QACA,WACA,UACA,SACA,UACA,UACA,WACA,WACA,SACA,OACA,UACA,WACA,QACA,YACA,KACA,MACA,SACA,SACA,KACA,MACA,UACA,gBACA,mBACA,SACA,WACA,OACA,OACA,UACA,UACA,gBACA,sBACA,cACA,mBACA,oBACA,oBACA,iBACA,eACA,UACA,UACA,UACA,UACA,UACA,iBACA,UACA,UACA,cACA,eACA,WACA,eACA,qBACA,cACA,SACA,eACA,SACA,gBACA,IACA,QACA,OACA,iBACA,SACA,OACA,WACA,QACA,OACA,UACA,UACA,WACA,iBACA,OACA,MACA,OACA,MACA,SACA,SACA,OACA,WACA,QACA,MACA,MACF,GAEAC,EA5MWD,EA4MJ,qBAAqB,CAAC,SAAU,OAAQ,MAAO,UAAW,UAAU,GAC3EC,EA7MWD,EA6MJ,2BAA2B,oBAClCC,EA9MWD,EA8MJ,YAAY,OAAO,YACxB,CACE,iBACA,WACA,aACA,WACA,cACA,cACA,eACA,eACA,aACA,gBACA,UACA,WACA,UACA,iBACA,aACA,UACA,UACF,EAAE,IAAI,CAACE,EAAU7E,IACflC,EAAU,CAAC+G,EAAUA,CAAQ,EAAI,CAACA,EAAU,IAAI7E,IAAM,CACxD,CACF,GAsnCA4E,EA11CWD,EA01CJ,gBAAgB,CAAC,SAAU,GAAG,GAsHhC,IAAIG,EAAsBH,ECz9ClB,SAARI,EAAkBC,EAAmBC,EAAkC,CAC5E,GAAM,CAAE,MAAAC,CAAM,EAAIF,EACZ,CACJ,MAAAG,EAAQ,uBACR,aAAAC,EAAe,uCACf,eAAAC,EAAiB,GACjB,SAAAC,EAAWC,GAAmBA,CAChC,EAAIN,EAEEO,EAAiB,IAAIC,EACzBT,EACAE,EACA,MAAM,QAAQC,CAAK,EAAIA,EAAQ,CAACA,CAAK,EACrC,MAAM,QAAQC,CAAY,EAAIA,EAAe,CAACA,CAAY,EAC1DC,EACAC,CACF,EAEA,MAAO,CACL,QAAS,CACP,QAAS,CACP,MAAMI,EAAM,CAAE,SAAAC,CAAS,EAAG,CACxB,OAAOH,EAAe,oBAAoBE,EAAMC,CAAQ,CAC1D,EACA,KAAMH,EAAe,mBAAmB,KAAKA,CAAc,CAC7D,EACA,iBAAkB,CAChB,MAAOA,EAAe,WAAW,KAAKA,CAAc,EACpD,KAAMA,EAAe,UAAU,KAAKA,CAAc,CACpD,EACA,gBAAiB,CACf,MAAOA,EAAe,WAAW,KAAKA,CAAc,EACpD,KAAMA,EAAe,UAAU,KAAKA,CAAc,CACpD,EACA,YAAaA,EAAe,mBAAmB,KAAKA,CAAc,EAClE,cAAeA,EAAe,qBAAqB,KAAKA,CAAc,CACxE,CACF,CACF,CFrCe,SAARI,EACLC,EACAC,EACkB,CAClB,MAAO,CACL,QAAS,CACPC,EACA,CAACC,EAAiB,SAAWA,EAAkB,CAAE,OAAQ,EAAK,CAAC,EAC/D,CAACC,EAAQH,CAAO,CAClB,CACF,CACF","names":["syntaxTypescript","syntaxDecorators","minimatch","parseView","parseReactivity","generateSubView","generateView","devMode","_PluginProvider","babelApi","types","includes","excludes","enableDevTools","htmlTags","tag","key","isWatcher","isStatic","isChildren","path","node","dlightImports","n","i","value","_path","filename","watchDeco","deps","listenDeps","arg","decorators","isProp","isEnv","propertyIdx","watcherNode","childrenFuncCallNode","getterNode","derivedStatusKey","decoratorName","idx","reverseDeps","idxNode","depsNode","d","setterNode","usedProperties","propertyArr","depReversedMap","isPropOrEnv","isContent","usedPropertySet","mainView","subViewNodes","viewNode","isSubView","isMainView","exp","newViewNode","subViewNames","v","subViewPropSubDepMap","prop","props","p","subDeps","_","templateIdx","viewUnits","parseView","viewParticles","parseReactivity","body","classProperties","generateView","viewParticlesProperty","subViewProp","identifierDepMap","dep","viewParticlesIdentifier","subViewPropMap","newTemplateIdx","generateSubView","fileName","pattern","minimatch","deco","names","name","constructor","assignDeps","innerPath","propertyKey","depArr","reversedMap","propertyNode","methodNode","parentNode","currentNode","idName","reversePath","checkParam","param","el","identifierKeys","stopNode","currNode","isRightExp","leftNode","typeEqual","identifierEqual","isInFunction","isFunction","isManual","length","PluginProvider","__publicField","funcName","PluginProviderClass","plugin_default","api","options","types","files","excludeFiles","enableDevTools","htmlTags","defaultHtmlTags","pluginProvider","PluginProviderClass","path","filename","src_default","_","options","syntaxTypescript","syntaxDecorators","plugin_default"]}
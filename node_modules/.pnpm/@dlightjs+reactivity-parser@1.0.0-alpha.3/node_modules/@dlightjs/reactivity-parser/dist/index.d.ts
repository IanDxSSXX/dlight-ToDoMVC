import { ViewUnit } from '@dlightjs/view-parser';
import Babel, { types } from '@babel/core';

interface DependencyValue<T> {
    value: T;
    dependencyIndexArr?: number[];
}
interface DependencyProp {
    value: types.Expression;
    viewPropMap?: Record<string, ViewParticle[]>;
    dependencyIndexArr?: number[];
}
interface TemplateProp {
    tag: string;
    key: string;
    path: number[];
    value: types.Expression;
    dependencyIndexArr?: number[];
}
type mutableParticle = ViewParticle & {
    path: number[];
};
interface TemplateParticle {
    type: "template";
    template: string;
    mutableParticles: mutableParticle[];
    props: TemplateProp[];
}
interface TextParticle {
    type: "text";
    content: DependencyValue<types.Expression>;
}
interface HTMLParticle {
    type: "html";
    tag: types.Expression;
    props?: Record<string, DependencyValue<types.Expression>>;
    children?: ViewParticle[];
}
interface CompParticle {
    type: "comp";
    tag: types.Expression;
    content?: DependencyProp;
    props?: Record<string, DependencyProp>;
    children?: ViewParticle[];
}
interface ForParticle {
    type: "for";
    item: types.LVal;
    array: DependencyValue<types.Expression>;
    key?: types.Expression;
    children: ViewParticle[];
}
interface IfBranch {
    condition: DependencyValue<types.Expression>;
    children: ViewParticle[];
}
interface IfParticle {
    type: "if";
    branches: IfBranch[];
}
interface SwitchBranch {
    case: DependencyValue<types.Expression> | null | undefined;
    children: ViewParticle[];
    break: boolean;
}
interface SwitchParticle {
    type: "switch";
    discriminant: DependencyValue<types.Expression>;
    branches: SwitchBranch[];
}
interface EnvParticle {
    type: "env";
    props: Record<string, DependencyProp>;
    children: ViewParticle[];
}
interface ExpParticle {
    type: "exp";
    content: DependencyProp;
    props?: Record<string, DependencyProp>;
}
interface SubviewParticle {
    type: "subview";
    tag: string;
    props?: Record<string, DependencyProp>;
    children?: ViewParticle[];
}
type ViewParticle = TemplateParticle | TextParticle | HTMLParticle | CompParticle | ForParticle | IfParticle | EnvParticle | ExpParticle | SwitchParticle | SubviewParticle;
interface ReactivityParserConfig {
    babelApi: typeof Babel;
    availableProperties: string[];
    dependencyMap: Record<string, string[]>;
    identifierDepMap?: Record<string, string[]>;
    dependencyParseType?: "property" | "identifier";
}
interface ReactivityParserOption {
    escapeNamings?: string[];
    customHTMLProps?: string[];
}

/**
 * @brief Parse view units to get used properties and view particles with reactivity
 * @param viewUnits
 * @param config
 * @param options
 * @returns [viewParticles, usedProperties]
 */
declare function parseReactivity(viewUnits: ViewUnit[], config: ReactivityParserConfig, options?: ReactivityParserOption): [ViewParticle[], Set<string>];

export { CompParticle, DependencyProp, DependencyValue, EnvParticle, ExpParticle, ForParticle, HTMLParticle, IfBranch, IfParticle, ReactivityParserConfig, ReactivityParserOption, SubviewParticle, SwitchBranch, SwitchParticle, TemplateParticle, TemplateProp, TextParticle, ViewParticle, mutableParticle, parseReactivity };
